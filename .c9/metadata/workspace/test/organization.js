{"filter":false,"title":"organization.js","tooltip":"/test/organization.js","undoManager":{"mark":87,"position":87,"stack":[[{"start":{"row":209,"column":36},"end":{"row":210,"column":12},"action":"insert","lines":["","            "],"id":2,"ignore":true}],[{"start":{"row":209,"column":36},"end":{"row":210,"column":12},"action":"remove","lines":["","            "],"id":3,"ignore":true}],[{"start":{"row":209,"column":36},"end":{"row":213,"column":36},"action":"insert","lines":["","          }).then(","          function(balance) { ","            assert.equal(balance, 91, \"Wrong balance after vote\")","            return p.forVotes.call()"],"id":4,"ignore":true}],[{"start":{"row":210,"column":8},"end":{"row":210,"column":10},"action":"remove","lines":["  "],"id":5,"ignore":true}],[{"start":{"row":209,"column":21},"end":{"row":209,"column":29},"action":"remove","lines":["forVotes"],"id":6,"ignore":true},{"start":{"row":209,"column":21},"end":{"row":209,"column":32},"action":"insert","lines":["propBalance"]}],[{"start":{"row":211,"column":19},"end":{"row":211,"column":23},"action":"insert","lines":["prop"],"id":7,"ignore":true}],[{"start":{"row":212,"column":25},"end":{"row":212,"column":29},"action":"insert","lines":["prop"],"id":8,"ignore":true},{"start":{"row":212,"column":38},"end":{"row":212,"column":40},"action":"remove","lines":["91"]}],[{"start":{"row":212,"column":38},"end":{"row":212,"column":39},"action":"insert","lines":["9"],"id":9,"ignore":true}],[{"start":{"row":212,"column":48},"end":{"row":212,"column":52},"action":"insert","lines":["prop"],"id":10,"ignore":true}],[{"start":{"row":209,"column":21},"end":{"row":209,"column":32},"action":"remove","lines":["propBalance"],"id":11,"ignore":true},{"start":{"row":209,"column":21},"end":{"row":209,"column":28},"action":"insert","lines":["balance"]}],[{"start":{"row":220,"column":5},"end":{"row":283,"column":0},"action":"remove","lines":["","  // it(\"Should let you buy a ticket\", function(done) {","  //   var c = organization.at(organization.deployed_address);","","  // \torganization.new({ from: accounts[0] }).then(","  // \t\tfunction(organization) {","","  //       var ticketPrice = web3.toWei(.05, 'ether');","  //       var initialBalance = web3.eth.getBalance(organization.address).toNumber();  ","","  // \t\t\torganization.buyTicket({ from: accounts[1], value: ticketPrice }).then(","  //         function() {","  // \t\t\t\t\tvar newBalance = web3.eth.getBalance(organization.address).toNumber();","  //           var difference = newBalance - initialBalance;","  // \t\t\t\t\tassert.equal(difference, ticketPrice, \"Difference should be what was sent\");","  // \t\t\t\t\treturn organization.numRegistrants.call(); ","  // \t\t\t}).then(","  // \t\t\t\tfunction(num) { ","  // \t\t\t\t\tassert.equal(num, 1, \"there should be 1 registrant\");","  // \t\t\t\t\treturn organization.registrantsPaid.call(sender_account);","  // \t\t\t}).then(","  // \t\t\t\tfunction(amount) {","  // \t\t\t\t\tassert.equal(amount.toNumber(), ticketPrice, \"Sender's paid but is not listed as paying\");\t","  // \t\t\t\t\treturn web3.eth.getBalance(organization.address);","  // \t\t\t}).then(","  // \t\t\t\tfunction(bal) {","  //           assert.equal(bal.toNumber(), ticketPrice, \"Final balance mismatch\");","  // \t\t\t\t\tdone();","  // \t\t\t}).catch(done);","  // \t}).catch(done);","  // });","","  // it(\"Should issue a refund by owner only\", function(done) {","  //   var c = organization.at(organization.deployed_address);","    ","  //   organization.new({ from: accounts[0] }).then(","  //     function(organization) {","","  //       var ticketPrice = web3.toWei(.05, 'ether');","  //       var initialBalance = web3.eth.getBalance(organization.address).toNumber(); ","","  //       organization.buyTicket({ from: accounts[1], value: ticketPrice }).then(","  //         function() {","  //           var newBalance = web3.eth.getBalance(organization.address).toNumber();","  //           var difference = newBalance - initialBalance;","  //           assert.equal(difference, ticketPrice, \"Difference should be what was sent\");","","  //           // Now try to issue refund as second user - should fail","  //           return organization.refundTicket(accounts[1], ticketPrice, {from: accounts[1]});","  //       }).then(","  //         function() {  ","  //           var balance = web3.eth.getBalance(organization.address);","  //           assert.equal(balance, ticketPrice, \"Balance should be unchanged\");","  //           // Now try to issue refund as organizer/owner","  //           return organization.refundTicket(accounts[1], ticketPrice, {from: accounts[0]});","  //       }).then(","  //         function() {","  //           var postRefundBalance = web3.eth.getBalance(organization.address).toNumber();","  //           assert.equal(postRefundBalance, initialBalance, \"Balance should be initial balance\");","  //           done();","  //       }).catch(done);","  //     }).catch(done);","  //   });",""],"id":12,"ignore":true}],[{"start":{"row":222,"column":0},"end":{"row":260,"column":3},"action":"insert","lines":["","","","it(\"Should allow weighted vote for member\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    var p = {}","    ","    Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","      function(organization) {","        organization.addMember(member1).then(","          function() { ","            return organization.makeProposal('board election');","        }).then(","          function() { ","            return organization.proposals(0)","        }).then(","          function(proposalAddress) { ","            console.log(proposalAddress)","            p = Proposal.at(proposalAddress)","            return organization.vote(true, 3, proposalAddress, {from: member1})            ","        }).then(","          function() { ","            return organization.balances.call(member1)","        }).then(","          function(balance) { ","            assert.equal(balance, 91, \"Wrong balance after vote\")","            return p.balance.call()","        }).then(","          function(propbalance) { ","            assert.equal(propbalance, 9, \"Wrong propbalance after vote\")","            return p.forVotes.call()","        }).then(","          function(numVotes) {  ","            assert.equal(numVotes, 3, \"Vote should be allowed\");","            done();","        }).catch(done);","    }).catch(done);","  });","});"],"id":13,"ignore":true}],[{"start":{"row":231,"column":45},"end":{"row":232,"column":10},"action":"insert","lines":["","          "],"id":14,"ignore":true}],[{"start":{"row":232,"column":8},"end":{"row":232,"column":10},"action":"remove","lines":["  "],"id":15,"ignore":true}],[{"start":{"row":232,"column":8},"end":{"row":232,"column":18},"action":"insert","lines":["  organiza"],"id":16,"ignore":true}],[{"start":{"row":232,"column":18},"end":{"row":232,"column":42},"action":"insert","lines":["tion.addMember(member2)/"],"id":17,"ignore":true}],[{"start":{"row":232,"column":41},"end":{"row":232,"column":42},"action":"remove","lines":["/"],"id":18,"ignore":true},{"start":{"row":232,"column":41},"end":{"row":232,"column":47},"action":"insert","lines":[".then("]}],[{"start":{"row":232,"column":41},"end":{"row":232,"column":42},"action":"insert","lines":[")"],"id":19,"ignore":true}],[{"start":{"row":232,"column":8},"end":{"row":232,"column":10},"action":"remove","lines":["  "],"id":20,"ignore":true}],[{"start":{"row":231,"column":39},"end":{"row":232,"column":8},"action":"insert","lines":["","        "],"id":21,"ignore":true},{"start":{"row":233,"column":40},"end":{"row":234,"column":8},"action":"insert","lines":["","        "]}],[{"start":{"row":231,"column":39},"end":{"row":232,"column":8},"action":"remove","lines":["","        "],"id":22,"ignore":true},{"start":{"row":232,"column":40},"end":{"row":233,"column":8},"action":"remove","lines":["","        "]}],[{"start":{"row":230,"column":27},"end":{"row":230,"column":30},"action":"remove","lines":[") {"],"id":23,"ignore":true},{"start":{"row":230,"column":27},"end":{"row":230,"column":30},"action":"insert","lines":[") {"]},{"start":{"row":232,"column":8},"end":{"row":232,"column":10},"action":"insert","lines":["  "]}],[{"start":{"row":242,"column":12},"end":{"row":242,"column":19},"action":"remove","lines":["return "],"id":24,"ignore":true}],[{"start":{"row":242,"column":82},"end":{"row":242,"column":84},"action":"remove","lines":["  "],"id":25,"ignore":true},{"start":{"row":242,"column":82},"end":{"row":243,"column":84},"action":"insert","lines":["","            organization.vote(true, 3, proposalAddress, {from: member1})            "]}],[{"start":{"row":243,"column":30},"end":{"row":243,"column":34},"action":"remove","lines":["true"],"id":26,"ignore":true},{"start":{"row":243,"column":30},"end":{"row":243,"column":32},"action":"insert","lines":["fa"]}],[{"start":{"row":243,"column":32},"end":{"row":243,"column":35},"action":"insert","lines":["lse"],"id":27,"ignore":true},{"start":{"row":243,"column":37},"end":{"row":243,"column":38},"action":"remove","lines":["3"]},{"start":{"row":243,"column":37},"end":{"row":243,"column":38},"action":"insert","lines":["2"]}],[{"start":{"row":243,"column":70},"end":{"row":243,"column":71},"action":"remove","lines":["1"],"id":28,"ignore":true},{"start":{"row":243,"column":70},"end":{"row":243,"column":71},"action":"insert","lines":["2"]}],[{"start":{"row":250,"column":35},"end":{"row":254,"column":35},"action":"insert","lines":["","          }).then(","          function(balance) { ","            assert.equal(balance, 91, \"Wrong balance after vote\")","            return p.balance.call()"],"id":29,"ignore":true}],[{"start":{"row":251,"column":8},"end":{"row":251,"column":10},"action":"remove","lines":["  "],"id":30,"ignore":true}],[{"start":{"row":253,"column":34},"end":{"row":253,"column":36},"action":"remove","lines":["91"],"id":31,"ignore":true},{"start":{"row":253,"column":34},"end":{"row":253,"column":36},"action":"insert","lines":["96"]}],[{"start":{"row":250,"column":0},"end":{"row":251,"column":0},"action":"remove","lines":["            return p.balance.call()",""],"id":32,"ignore":true},{"start":{"row":250,"column":0},"end":{"row":251,"column":0},"action":"insert","lines":["            return organization.balances.call(member1)",""]}],[{"start":{"row":250,"column":52},"end":{"row":250,"column":53},"action":"remove","lines":["1"],"id":33,"ignore":true},{"start":{"row":250,"column":52},"end":{"row":250,"column":53},"action":"insert","lines":["2"]}],[{"start":{"row":254,"column":35},"end":{"row":258,"column":36},"action":"remove","lines":["","        }).then(","          function(propbalance) { ","            assert.equal(propbalance, 9, \"Wrong propbalance after vote\")","            return p.forVotes.call()"],"id":37,"ignore":true}],[{"start":{"row":254,"column":19},"end":{"row":254,"column":21},"action":"remove","lines":["p."],"id":38,"ignore":true},{"start":{"row":254,"column":19},"end":{"row":254,"column":32},"action":"insert","lines":["organization."]}],[{"start":{"row":254,"column":32},"end":{"row":254,"column":39},"action":"remove","lines":["balance"],"id":39,"ignore":true}],[{"start":{"row":254,"column":12},"end":{"row":255,"column":12},"action":"insert","lines":["organization.","            "],"id":40,"ignore":true}],[{"start":{"row":254,"column":25},"end":{"row":254,"column":36},"action":"insert","lines":["getResult()"],"id":41,"ignore":true}],[{"start":{"row":255,"column":32},"end":{"row":255,"column":43},"action":"insert","lines":["propResults"],"id":42,"ignore":true}],[{"start":{"row":255,"column":49},"end":{"row":255,"column":64},"action":"insert","lines":["proposalAddress"],"id":43,"ignore":true}],[{"start":{"row":257,"column":19},"end":{"row":257,"column":27},"action":"remove","lines":["numVotes"],"id":44,"ignore":true},{"start":{"row":257,"column":19},"end":{"row":257,"column":25},"action":"insert","lines":["result"]}],[{"start":{"row":258,"column":25},"end":{"row":258,"column":33},"action":"remove","lines":["numVotes"],"id":45,"ignore":true},{"start":{"row":258,"column":25},"end":{"row":258,"column":31},"action":"insert","lines":["result"]}],[{"start":{"row":258,"column":33},"end":{"row":258,"column":34},"action":"remove","lines":["3"],"id":46,"ignore":true},{"start":{"row":258,"column":33},"end":{"row":258,"column":34},"action":"insert","lines":["1"]}],[{"start":{"row":258,"column":38},"end":{"row":258,"column":59},"action":"remove","lines":["ote should be allowed"],"id":47,"ignore":true}],[{"start":{"row":249,"column":63},"end":{"row":249,"column":75},"action":"insert","lines":[" for member1"],"id":48,"ignore":true},{"start":{"row":253,"column":63},"end":{"row":253,"column":70},"action":"insert","lines":[" for me"]},{"start":{"row":258,"column":37},"end":{"row":258,"column":38},"action":"remove","lines":["V"]},{"start":{"row":258,"column":37},"end":{"row":258,"column":63},"action":"insert","lines":["Proposal should be adopted"]}],[{"start":{"row":253,"column":68},"end":{"row":253,"column":70},"action":"remove","lines":["me"],"id":49,"ignore":true},{"start":{"row":253,"column":68},"end":{"row":253,"column":75},"action":"insert","lines":["member2"]}],[{"start":{"row":255,"column":65},"end":{"row":260,"column":65},"action":"insert","lines":["","          }).then(","          function(balance) { ","            assert.equal(balance, 96, \"Wrong balance after vote for member2\")","            organization.getResult()","            return organization.propResults.call(proposalAddress)"],"id":50,"ignore":true}],[{"start":{"row":256,"column":8},"end":{"row":256,"column":10},"action":"remove","lines":["  "],"id":51,"ignore":true}],[{"start":{"row":255,"column":65},"end":{"row":260,"column":65},"action":"remove","lines":["","        }).then(","          function(balance) { ","            assert.equal(balance, 96, \"Wrong balance after vote for member2\")","            organization.getResult()","            return organization.propResults.call(proposalAddress)"],"id":52,"ignore":true}],[{"start":{"row":259,"column":12},"end":{"row":259,"column":19},"action":"remove","lines":["done();"],"id":53,"ignore":true},{"start":{"row":260,"column":10},"end":{"row":265,"column":65},"action":"insert","lines":["","        }).then(","          function(balance) { ","            assert.equal(balance, 96, \"Wrong balance after vote for member2\")","            organization.getResult()","            return organization.propResults.call(proposalAddress)"]}],[{"start":{"row":259,"column":0},"end":{"row":259,"column":8},"action":"remove","lines":["        "],"id":54,"ignore":true},{"start":{"row":259,"column":0},"end":{"row":263,"column":65},"action":"insert","lines":["          }).then(","          function(balance) { ","            assert.equal(balance, 96, \"Wrong balance after vote for member2\")","            organization.getResult()","            return organization.propResults.call(proposalAddress)"]},{"start":{"row":264,"column":10},"end":{"row":269,"column":65},"action":"remove","lines":["","        }).then(","          function(balance) { ","            assert.equal(balance, 96, \"Wrong balance after vote for member2\")","            organization.getResult()","            return organization.propResults.call(proposalAddress)"]}],[{"start":{"row":263,"column":65},"end":{"row":263,"column":69},"action":"remove","lines":["    "],"id":55,"ignore":true},{"start":{"row":263,"column":65},"end":{"row":273,"column":65},"action":"insert","lines":["","          }).then(","          function(balance) { ","            assert.equal(balance, 96, \"Wrong balance after vote for member2\")","            organization.getResult()","            return organization.propResults.call(proposalAddress)","          }).then(","          function(balance) { ","            assert.equal(balance, 96, \"Wrong balance after vote for member2\")","            organization.getResult()","            return organization.propResults.call(proposalAddress)"]}],[{"start":{"row":260,"column":19},"end":{"row":260,"column":26},"action":"remove","lines":["balance"],"id":56,"ignore":true}],[{"start":{"row":260,"column":19},"end":{"row":260,"column":27},"action":"insert","lines":["dispatch"],"id":57,"ignore":true}],[{"start":{"row":260,"column":31},"end":{"row":262,"column":36},"action":"remove","lines":["","            assert.equal(balance, 96, \"Wrong balance after vote for member2\")","            organization.getResult()"],"id":58,"ignore":true}],[{"start":{"row":261,"column":0},"end":{"row":262,"column":0},"action":"remove","lines":["            return organization.propResults.call(proposalAddress)",""],"id":59,"ignore":true},{"start":{"row":261,"column":0},"end":{"row":262,"column":0},"action":"insert","lines":["            return organization.balances.call(member1)",""]}],[{"start":{"row":263,"column":19},"end":{"row":263,"column":26},"action":"remove","lines":["balance"],"id":60,"ignore":true},{"start":{"row":263,"column":19},"end":{"row":263,"column":29},"action":"insert","lines":["newbalance"]}],[{"start":{"row":264,"column":25},"end":{"row":264,"column":32},"action":"remove","lines":["balance"],"id":61,"ignore":true},{"start":{"row":264,"column":25},"end":{"row":264,"column":35},"action":"insert","lines":["newbalance"]}],[{"start":{"row":242,"column":36},"end":{"row":242,"column":37},"action":"remove","lines":["3"],"id":62,"ignore":true},{"start":{"row":242,"column":36},"end":{"row":242,"column":37},"action":"insert","lines":["4"]},{"start":{"row":243,"column":37},"end":{"row":243,"column":38},"action":"remove","lines":["2"]},{"start":{"row":243,"column":37},"end":{"row":243,"column":38},"action":"insert","lines":["3"]}],[{"start":{"row":243,"column":37},"end":{"row":243,"column":38},"action":"remove","lines":["3"],"id":63,"ignore":true},{"start":{"row":243,"column":37},"end":{"row":243,"column":38},"action":"insert","lines":["2"]}],[{"start":{"row":249,"column":34},"end":{"row":249,"column":36},"action":"remove","lines":["91"],"id":64,"ignore":true},{"start":{"row":249,"column":34},"end":{"row":249,"column":36},"action":"insert","lines":["84"]},{"start":{"row":253,"column":34},"end":{"row":253,"column":36},"action":"remove","lines":["96"]},{"start":{"row":253,"column":34},"end":{"row":253,"column":36},"action":"insert","lines":["91"]}],[{"start":{"row":264,"column":37},"end":{"row":264,"column":39},"action":"remove","lines":["96"],"id":65,"ignore":true},{"start":{"row":264,"column":37},"end":{"row":264,"column":39},"action":"insert","lines":["94"]}],[{"start":{"row":265,"column":25},"end":{"row":265,"column":34},"action":"remove","lines":["getResult"],"id":66,"ignore":true}],[{"start":{"row":265,"column":0},"end":{"row":266,"column":0},"action":"remove","lines":["            organization.()",""],"id":67,"ignore":true}],[{"start":{"row":265,"column":0},"end":{"row":266,"column":0},"action":"remove","lines":["            return organization.propResults.call(proposalAddress)",""],"id":68,"ignore":true},{"start":{"row":265,"column":0},"end":{"row":266,"column":0},"action":"insert","lines":["            return organization.balances.call(member2)",""]}],[{"start":{"row":267,"column":19},"end":{"row":267,"column":22},"action":"insert","lines":["new"],"id":69,"ignore":true},{"start":{"row":267,"column":29},"end":{"row":267,"column":30},"action":"insert","lines":["2"]}],[{"start":{"row":263,"column":29},"end":{"row":263,"column":30},"action":"insert","lines":["1"],"id":70,"ignore":true},{"start":{"row":264,"column":35},"end":{"row":264,"column":36},"action":"insert","lines":["1"]}],[{"start":{"row":268,"column":25},"end":{"row":268,"column":28},"action":"insert","lines":["new"],"id":71,"ignore":true},{"start":{"row":268,"column":35},"end":{"row":268,"column":36},"action":"insert","lines":["2"]}],[{"start":{"row":268,"column":38},"end":{"row":268,"column":40},"action":"remove","lines":["96"],"id":72,"ignore":true}],[{"start":{"row":268,"column":38},"end":{"row":268,"column":41},"action":"insert","lines":["101"],"id":73,"ignore":true}],[{"start":{"row":253,"column":35},"end":{"row":253,"column":36},"action":"remove","lines":["1"],"id":74,"ignore":true},{"start":{"row":253,"column":35},"end":{"row":253,"column":36},"action":"insert","lines":["6"]}],[{"start":{"row":268,"column":40},"end":{"row":268,"column":41},"action":"remove","lines":["1"],"id":75,"ignore":true},{"start":{"row":268,"column":40},"end":{"row":268,"column":41},"action":"insert","lines":["6"]}],[{"start":{"row":269,"column":12},"end":{"row":270,"column":65},"action":"remove","lines":["organization.getResult()","            return organization.propResults.call(proposalAddress)"],"id":76,"ignore":true},{"start":{"row":269,"column":12},"end":{"row":269,"column":19},"action":"insert","lines":["done();"]}],[{"start":{"row":225,"column":16},"end":{"row":225,"column":41},"action":"remove","lines":[" weighted vote for member"],"id":77,"ignore":true}],[{"start":{"row":225,"column":11},"end":{"row":225,"column":16},"action":"remove","lines":["allow"],"id":78,"ignore":true},{"start":{"row":225,"column":11},"end":{"row":225,"column":15},"action":"insert","lines":["get "]}],[{"start":{"row":225,"column":15},"end":{"row":225,"column":18},"action":"insert","lines":["res"],"id":79,"ignore":true}],[{"start":{"row":225,"column":18},"end":{"row":225,"column":23},"action":"insert","lines":["ult a"],"id":80,"ignore":true}],[{"start":{"row":225,"column":23},"end":{"row":225,"column":26},"action":"insert","lines":["nd "],"id":81,"ignore":true}],[{"start":{"row":225,"column":26},"end":{"row":225,"column":28},"action":"insert","lines":["re"],"id":82,"ignore":true}],[{"start":{"row":225,"column":28},"end":{"row":225,"column":34},"action":"insert","lines":["distri"],"id":83,"ignore":true}],[{"start":{"row":225,"column":34},"end":{"row":225,"column":38},"action":"insert","lines":["bute"],"id":84,"ignore":true}],[{"start":{"row":225,"column":38},"end":{"row":225,"column":44},"action":"insert","lines":[" token"],"id":85,"ignore":true}],[{"start":{"row":225,"column":44},"end":{"row":225,"column":45},"action":"insert","lines":["s"],"id":86,"ignore":true}],[{"start":{"row":221,"column":0},"end":{"row":222,"column":0},"action":"remove","lines":["});",""],"id":34}],[{"start":{"row":220,"column":5},"end":{"row":221,"column":0},"action":"remove","lines":["",""],"id":35}],[{"start":{"row":223,"column":0},"end":{"row":223,"column":2},"action":"insert","lines":["  "],"id":36}],[{"start":{"row":0,"column":0},"end":{"row":272,"column":0},"action":"remove","lines":["contract('organization', function(accounts) {","\tconsole.log(accounts);","\tvar organizer = accounts[0];","  var member1 = accounts[1];","  var member2 = accounts[2];","","  it(\"Initial organization settings should match\", function(done) {","","    var o = Organization.at(Organization.deployed_address);","  \t","  \tOrganization.new({from: organizer}).then(","  \t\tfunction(organization) {","  \t\t\torganization.token_count.call().then(","  \t\t\t\tfunction(count) { ","  \t\t\t\t\tassert.equal(count, 0, \"Count doesn't match!\"); ","  \t\t\t}).then(","  \t\t\t\tfunction() { ","  \t\t\t\t\treturn organization.numMembers.call(); ","  \t\t\t}).then(","  \t\t\t\tfunction(num) { ","  \t\t\t\t\tassert.equal(num, 0, \"Members doesn't match!\");","  \t\t\t\t\treturn organization.organizer.call();","  \t\t\t}).then(","  \t\t\t\tfunction(organizer) { ","  \t\t\t\t\tassert.equal(organizer, organizer, \"Organizer doesn't match!\");","  \t\t\t\t\tdone();","  \t\t\t}).catch(done);","  \t}).catch(done);","  });","","  it(\"Should update token_count, numMembers and balance upon adding member\", function(done) {","    var o = Organization.at(Organization.deployed_address);","  \t","  \tOrganization.new({from: organizer}).then(","  \t\tfunction(organization) {","  \t\t\torganization.token_count.call().then(","  \t\t\t\tfunction(count) { ","  \t\t\t\t\tassert.equal(count, 0, \"Count doesn't match!\"); ","  \t\t\t}).then(","  \t\t\t\tfunction() { ","  \t\t\t\t\treturn organization.addMember(member1);","  \t\t\t}).then(","  \t\t\t\tfunction() { ","  \t\t\t\t\treturn organization.token_count.call()","  \t\t\t}).then(","          function(count) { ","            assert.equal(count, 100, \"New token_count is not correct!\");","            return organization.numMembers.call()","        }).then(","          function(num) { ","            assert.equal(num, 1, \"New numMembers is not correct!\");","            return organization.members.call(member1)","        }).then(","          function(isMember) { ","            assert.equal(isMember, true, \"Member 1 is not registered\");","            return organization.balances.call(member1)","        }).then(","          function(balance) { ","            assert.equal(balance, 100, \"Balance is wrong\");","            done()","        }).catch(done);","  \t}).catch(done);","  });","","  it(\"Should update token_count, numMembers and balance upon removing member\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    ","    Organization.new({from: organizer}).then(","      function(organization) {","        organization.token_count.call().then(","          function(count) { ","            assert.equal(count, 0, \"Count doesn't match!\"); ","        }).then(","          function() { ","            return organization.addMember(member1);","        }).then(","          function() { ","            return organization.removeMember(member1);","        }).then(","          function() { ","            return organization.token_count.call()","        }).then(","          function(count) { ","            assert.equal(count, 0, \"New token_count is not correct!\");","            return organization.numMembers.call()","        }).then(","          function(num) { ","            assert.equal(num, 0, \"New numMembers is not correct!\");","            return organization.members.call(member1)","        }).then(","          function(isMember) { ","            assert.equal(isMember, false, \"Member 1 is not registered\");","            return organization.balances.call(member1)","        }).then(","          function(balance) { ","            assert.equal(balance, 0, \"Balance is wrong\");","            done()","        }).catch(done);","    }).catch(done);","  });","","  it(\"Should update proposal array when creating proposal\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    ","    Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","      function(organization) {","        organization.token_count.call().then(","          function(count) { ","            assert.equal(count, 0, \"Count doesn't match!\"); ","        }).then(","          function() { ","            return organization.makeProposal('board election');","        }).then(","          function() { ","            return organization.numProposals.call();","        }).then(","          function(num) { ","            assert.equal(num, 1, \"New numProposal wrong\")","            return organization.proposals(0)","        }).then(","          function(proposalAddress) { ","            var proposal = Proposal.at(proposalAddress)","            return proposal.name.call()","        }).then(","          function(name) { ","            assert.equal(name, 'board election', \"Proposal name is wrong\");","            done();","        }).catch(done);","    }).catch(done);","  });","","  it(\"Should forbid vote for non-member\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    var p = {}","    ","    Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","      function(organization) {","            organization.makeProposal('board election').then(","          function() { ","            return organization.proposals(0)","        }).then(","          function(proposalAddress) { ","            p = Proposal.at(proposalAddress)","            return organization.vote(true, 1, proposalAddress, {from: member1})            ","        }).then(","          function() { ","            console.log(\"4\")","","            return p.forVotes.call()","        }).then(","          function(numVotes) {  ","                                    console.log(\"5\")","","            assert.equal(numVotes, 0, \"Vote shouldn't be allowed\");","            done();","        }).catch(done);","    }).catch(done);","  });","","  it(\"Should allow vote for member\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    var p = {}","    ","    Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","      function(organization) {","        organization.addMember(member1).then(","          function() { ","            return organization.makeProposal('board election');","        }).then(","          function() { ","            return organization.proposals(0)","        }).then(","          function(proposalAddress) { ","            p = Proposal.at(proposalAddress)","            return organization.vote(true, 1, proposalAddress, {from: member1})            ","        }).then(","          function() { ","            return p.forVotes.call()","        }).then(","          function(numVotes) {  ","            assert.equal(numVotes, 1, \"Vote should be allowed\");","            done();","        }).catch(done);","    }).catch(done);","  });","","  it(\"Should allow weighted vote for member\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    var p = {}","    ","    Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","      function(organization) {","        organization.addMember(member1).then(","          function() { ","            return organization.makeProposal('board election');","        }).then(","          function() { ","            return organization.proposals(0)","        }).then(","          function(proposalAddress) { ","            console.log(proposalAddress)","            p = Proposal.at(proposalAddress)","            return organization.vote(true, 3, proposalAddress, {from: member1})            ","        }).then(","          function() { ","            return organization.balances.call(member1)","        }).then(","          function(balance) { ","            assert.equal(balance, 91, \"Wrong balance after vote\")","            return p.balance.call()","        }).then(","          function(propbalance) { ","            assert.equal(propbalance, 9, \"Wrong propbalance after vote\")","            return p.forVotes.call()","        }).then(","          function(numVotes) {  ","            assert.equal(numVotes, 3, \"Vote should be allowed\");","            done();","        }).catch(done);","    }).catch(done);","  });","","","  it(\"Should get result and redistribute tokens\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    var p = {}","    ","    Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","      function(organization) {","        organization.addMember(member1).then(","          organization.addMember(member2)).then(","          function() { ","            return organization.makeProposal('board election');","        }).then(","          function() { ","            return organization.proposals(0)","        }).then(","          function(proposalAddress) { ","            console.log(proposalAddress)","            p = Proposal.at(proposalAddress)","            organization.vote(true, 4, proposalAddress, {from: member1})          ","            organization.vote(false, 2, proposalAddress, {from: member2})            ","        }).then(","          function() { ","            return organization.balances.call(member1)","        }).then(","          function(balance) { ","            assert.equal(balance, 84, \"Wrong balance after vote for member1\")","            return organization.balances.call(member2)","        }).then(","          function(balance) { ","            assert.equal(balance, 96, \"Wrong balance after vote for member2\")","            organization.getResult()","            return organization.propResults.call(proposalAddress)","        }).then(","          function(result) {  ","            assert.equal(result, 1, \"Proposal should be adopted\");","          }).then(","          function(dispatch) { ","            return organization.balances.call(member1)","          }).then(","          function(newbalance1) { ","            assert.equal(newbalance1, 94, \"Wrong balance after vote for member2\")","            return organization.balances.call(member2)","          }).then(","          function(newbalance2) { ","            assert.equal(newbalance2, 106, \"Wrong balance after vote for member2\")","            done();","        }).catch(done);","    }).catch(done);","  });","});",""],"id":153},{"start":{"row":0,"column":0},"end":{"row":352,"column":0},"action":"insert","lines":["contract('organization', function(accounts) {","  console.log(accounts);","  var organizer = accounts[0];","  var member1 = accounts[1];","  var member2 = accounts[2];","","  // it(\"Initial organization settings should match\", function(done) {","","  //   var o = Organization.at(Organization.deployed_address);","    ","  //   Organization.new({from: organizer}).then(","  //     function(organization) {","  //       organization.token_count.call().then(","  //         function(count) { ","  //           assert.equal(count, 0, \"Count doesn't match!\"); ","  //       }).then(","  //         function() { ","  //           return organization.numMembers.call(); ","  //       }).then(","  //         function(num) { ","  //           assert.equal(num, 0, \"Members doesn't match!\");","  //           return organization.organizer.call();","  //       }).then(","  //         function(organizer) { ","  //           assert.equal(organizer, organizer, \"Organizer doesn't match!\");","  //           done();","  //       }).catch(done);","  //   }).catch(done);","  // });","","  // it(\"Should update token_count, numMembers and balance upon adding member\", function(done) {","  //   var o = Organization.at(Organization.deployed_address);","    ","  //   Organization.new({from: organizer}).then(","  //     function(organization) {","  //       organization.token_count.call().then(","  //         function(count) { ","  //           assert.equal(count, 0, \"Count doesn't match!\"); ","  //       }).then(","  //         function() { ","  //           return organization.addMember(member1);","  //       }).then(","  //         function() { ","  //           return organization.token_count.call()","  //       }).then(","  //         function(count) { ","  //           assert.equal(count, 100, \"New token_count is not correct!\");","  //           return organization.numMembers.call()","  //       }).then(","  //         function(num) { ","  //           assert.equal(num, 1, \"New numMembers is not correct!\");","  //           return organization.members.call(member1)","  //       }).then(","  //         function(isMember) { ","  //           assert.equal(isMember, true, \"Member 1 is not registered\");","  //           return organization.balances.call(member1)","  //       }).then(","  //         function(balance) { ","  //           assert.equal(balance, 100, \"Balance is wrong\");","  //           done()","  //       }).catch(done);","  //   }).catch(done);","  // });","","  // it(\"Should update token_count, numMembers and balance upon removing member\", function(done) {","  //   var o = Organization.at(Organization.deployed_address);","    ","  //   Organization.new({from: organizer}).then(","  //     function(organization) {","  //       organization.token_count.call().then(","  //         function(count) { ","  //           assert.equal(count, 0, \"Count doesn't match!\"); ","  //       }).then(","  //         function() { ","  //           return organization.addMember(member1);","  //       }).then(","  //         function() { ","  //           return organization.removeMember(member1);","  //       }).then(","  //         function() { ","  //           return organization.token_count.call()","  //       }).then(","  //         function(count) { ","  //           assert.equal(count, 0, \"New token_count is not correct!\");","  //           return organization.numMembers.call()","  //       }).then(","  //         function(num) { ","  //           assert.equal(num, 0, \"New numMembers is not correct!\");","  //           return organization.members.call(member1)","  //       }).then(","  //         function(isMember) { ","  //           assert.equal(isMember, false, \"Member 1 is not registered\");","  //           return organization.balances.call(member1)","  //       }).then(","  //         function(balance) { ","  //           assert.equal(balance, 0, \"Balance is wrong\");","  //           done()","  //       }).catch(done);","  //   }).catch(done);","  // });","","  // it(\"Should update proposal array when creating proposal\", function(done) {","  //   var o = Organization.at(Organization.deployed_address);","    ","  //   Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","  //     function(organization) {","  //       organization.makeProposal('board election', 14491063620 + 10, 14491063620 +12).then(","  //         function() { ","  //           return organization.numProposals.call();","  //       }).then(","  //         function(num) { ","  //           assert.equal(num, 1, \"New numProposal wrong\")","  //           return organization.proposals(0)","  //       }).then(","  //         function(proposalAddress) { ","  //           var proposal = Proposal.at(proposalAddress)","  //           return proposal.name.call()","  //       }).then(","  //         function(name) { ","  //           assert.equal(name, 'board election', \"Proposal name is wrong\");","  //           done();","  //       }).catch(done);","  //   }).catch(done);","  // });","","  // it(\"Should forbid vote for non-member\", function(done) {","  //   var o = Organization.at(Organization.deployed_address);","  //   var p = {}","    ","  //   Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","  //     function(organization) {","  //       organization.makeProposal('board election', 14491063620 + 10, 14491063620 +12).then(","  //         function() { ","  //           return organization.proposals(0);","  //       }).then(","  //         function(proposalAddress) { ","  //           p = Proposal.at(proposalAddress)","  //           return organization.vote(true, 1, proposalAddress, {from: member1})            ","  //       }).then(","  //         function() { ","  //           return p.forVotes.call()","  //       }).then(","  //         function(numVotes) {  ","  //           assert.equal(numVotes, 0, \"Vote shouldn't be allowed\");","  //           done();","  //       }).catch(done);","  //   }).catch(done);","  // });","","  // it(\"Should allow vote for member\", function(done) {","  //   var o = Organization.at(Organization.deployed_address);","  //   var p = {}","    ","  //   Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","  //     function(organization) {","  //       organization.addMember(member1)","  //       .then(","  //         function() {","  //           return organization.toTime(0)","  //       }).then(","  //         function() { ","  //           return organization.makeProposal('board election', 4, 10);","  //       }).then(","  //         function() { ","  //           return organization.toTime(7)","  //       }).then(","  //         function() { ","  //           return organization.proposals(0)","  //       }).then(","  //         function(proposalAddress) { ","  //           p = Proposal.at(proposalAddress)","  //           p.toTime(7)","  //           return organization.proposals(0)           ","  //       }).then(","  //         function(proposalAddress) { ","  //           p = Proposal.at(proposalAddress)","  //           return organization.vote(true, 1, proposalAddress, {from: member1})            ","  //       }).then(","  //         function() { ","  //           return p.forVotes.call()","  //       }).then(","  //         function(numVotes) {  ","  //           assert.equal(numVotes.toString(10), 1, \"Vote should be allowed\");","  //           done();","  //       }).catch(done);","  //   }).catch(done);","  // });","","  // it(\"Should allow weighted vote for member\", function(done) {","  //   var o = Organization.at(Organization.deployed_address);","  //   var p = {}","    ","  //   Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","  //     function(organization) {","  //       organization.addMember(member1)","  //       .then(","  //         function() {","  //           return organization.toTime(0)","  //       }).then(","  //         function() {  ","  //           return organization.makeProposal('board election',  4, 10);","  //       }).then(","  //         function() { ","  //           return organization.toTime(7)","  //       }).then(","  //         function() { ","  //           return organization.proposals(0)","  //       }).then(","  //         function(proposalAddress) { ","  //           p = Proposal.at(proposalAddress)","  //           p.toTime(7)","  //           return organization.proposals(0)           ","  //       }).then(","  //         function(proposalAddress) { ","  //           console.log(proposalAddress)","  //           p = Proposal.at(proposalAddress)","  //           return organization.vote(true, 3, proposalAddress, {from: member1})            ","  //       }).then(","  //         function() { ","  //           return organization.balances.call(member1)","  //       }).then(","  //         function(balance) { ","  //           assert.equal(balance, 91, \"Wrong balance after vote\")","  //           return p.bal.call()","  //       }).then(","  //         function(propbalance) { ","  //           assert.equal(propbalance.toString(10), 9, \"Wrong propbalance after vote\")","  //           return p.forVotes.call()","  //       }).then(","  //         function(numVotes) {  ","  //           assert.equal(numVotes, 3, \"Vote should be allowed\");","  //           done();","  //       }).catch(done);","  //   }).catch(done);","  // });","","","  it(\"Should allow weighted vote for member\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    var p = {}","    ","    Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","      function(organization) {","        organization.addMember(member1).then(","          function() {","            return organization.toTime(0)","        }).then(","          organization.addMember(member2)).then(","          function() { ","            return organization.makeProposal('board election', 4, 10);","        }).then(","          function() { ","            return organization.toTime(7)","        }).then(","          function() { ","            return organization.proposals(0)","        }).then(","          function(proposalAddress) { ","            console.log(proposalAddress)","            p = Proposal.at(proposalAddress)","            p.toTime(7)","            organization.vote(true, 3, proposalAddress, {from: member1}) ","            return proposalAddress         ","        }).then(","          function(proposalAddress) {","            return organization.vote(false, 2, proposalAddress, {from: member2})   ","        }).then(","          function() { ","            return organization.balances.call(member1)","        }).then(","          function(balance) { ","            assert.equal(balance, 91, \"Wrong balance after vote\")","            return organization.balances.call(member2)","        }).then(","          function(balance) { ","            assert.equal(balance, 96, \"Wrong balance after vote\")","            return p.bal.call()","        }).then(","          function(propbalance) { ","            assert.equal(propbalance, 13, \"Wrong propbalance after vote\")","            return p.forVotes.call()","        }).then(","          function(numVotes) {  ","            assert.equal(numVotes, 3, \"Vote should be allowed\");","            done();","        }).catch(done);","    }).catch(done);","  });","","it(\"Should get result and redistribute tokens\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    var p = {}","    var paddress = {}","    ","    Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","      function(organization) {","        organization.addMember(member1).then(","          function() {","            return organization.toTime(0)","        }).then(","          function() {","            return organization.addMember(member2)","        }).then(","          function() { ","            return organization.makeProposal('board election', 4, 10);","        }).then(","          function() { ","            return organization.toTime(7)","        }).then(","          function() { ","            return organization.proposals(0)","        }).then(","          function(proposalAddress) { ","            console.log(proposalAddress)","            paddress = proposalAddress","            p = Proposal.at(proposalAddress)","            p.toTime(7)","            organization.vote(true, 4, proposalAddress, {from: member1})          ","            organization.vote(false, 2, proposalAddress, {from: member2})            ","        }).then(","          function() {","            return organization.balances.call(member1)","        }).then(","          function(balance) { ","            assert.equal(balance, 84, \"Wrong balance after vote for member1\")","            return organization.balances.call(member2)","        }).then(","          function(balance) {","            assert.equal(balance, 96, \"Wrong balance after vote for member2\")","            organization.toTime(13)","            p.toTime(13)","            organization.getResult(paddress)","            return organization.propResults.call(paddress)","        }).then(","          function(result) {  ","            assert.equal(result, 1, \"Proposal should be adopted\");","            return p.bal.call()","        }).then(","          function() { ","            return organization.balances.call(member1)","          }).then(","          function(newbalance1) { ","            assert.equal(newbalance1.toString(10), 94, \"Wrong balance after vote for member2\")","            return organization.balances.call(member2)","          }).then(","          function(newbalance2) { ","            assert.equal(newbalance2, 106, \"Wrong balance after vote for member2\")","            done();","        }).catch(done);","    }).catch(done);","  });","});",""]}],[{"start":{"row":6,"column":0},"end":{"row":234,"column":8},"action":"remove","lines":["  // it(\"Initial organization settings should match\", function(done) {","","  //   var o = Organization.at(Organization.deployed_address);","    ","  //   Organization.new({from: organizer}).then(","  //     function(organization) {","  //       organization.token_count.call().then(","  //         function(count) { ","  //           assert.equal(count, 0, \"Count doesn't match!\"); ","  //       }).then(","  //         function() { ","  //           return organization.numMembers.call(); ","  //       }).then(","  //         function(num) { ","  //           assert.equal(num, 0, \"Members doesn't match!\");","  //           return organization.organizer.call();","  //       }).then(","  //         function(organizer) { ","  //           assert.equal(organizer, organizer, \"Organizer doesn't match!\");","  //           done();","  //       }).catch(done);","  //   }).catch(done);","  // });","","  // it(\"Should update token_count, numMembers and balance upon adding member\", function(done) {","  //   var o = Organization.at(Organization.deployed_address);","    ","  //   Organization.new({from: organizer}).then(","  //     function(organization) {","  //       organization.token_count.call().then(","  //         function(count) { ","  //           assert.equal(count, 0, \"Count doesn't match!\"); ","  //       }).then(","  //         function() { ","  //           return organization.addMember(member1);","  //       }).then(","  //         function() { ","  //           return organization.token_count.call()","  //       }).then(","  //         function(count) { ","  //           assert.equal(count, 100, \"New token_count is not correct!\");","  //           return organization.numMembers.call()","  //       }).then(","  //         function(num) { ","  //           assert.equal(num, 1, \"New numMembers is not correct!\");","  //           return organization.members.call(member1)","  //       }).then(","  //         function(isMember) { ","  //           assert.equal(isMember, true, \"Member 1 is not registered\");","  //           return organization.balances.call(member1)","  //       }).then(","  //         function(balance) { ","  //           assert.equal(balance, 100, \"Balance is wrong\");","  //           done()","  //       }).catch(done);","  //   }).catch(done);","  // });","","  // it(\"Should update token_count, numMembers and balance upon removing member\", function(done) {","  //   var o = Organization.at(Organization.deployed_address);","    ","  //   Organization.new({from: organizer}).then(","  //     function(organization) {","  //       organization.token_count.call().then(","  //         function(count) { ","  //           assert.equal(count, 0, \"Count doesn't match!\"); ","  //       }).then(","  //         function() { ","  //           return organization.addMember(member1);","  //       }).then(","  //         function() { ","  //           return organization.removeMember(member1);","  //       }).then(","  //         function() { ","  //           return organization.token_count.call()","  //       }).then(","  //         function(count) { ","  //           assert.equal(count, 0, \"New token_count is not correct!\");","  //           return organization.numMembers.call()","  //       }).then(","  //         function(num) { ","  //           assert.equal(num, 0, \"New numMembers is not correct!\");","  //           return organization.members.call(member1)","  //       }).then(","  //         function(isMember) { ","  //           assert.equal(isMember, false, \"Member 1 is not registered\");","  //           return organization.balances.call(member1)","  //       }).then(","  //         function(balance) { ","  //           assert.equal(balance, 0, \"Balance is wrong\");","  //           done()","  //       }).catch(done);","  //   }).catch(done);","  // });","","  // it(\"Should update proposal array when creating proposal\", function(done) {","  //   var o = Organization.at(Organization.deployed_address);","    ","  //   Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","  //     function(organization) {","  //       organization.makeProposal('board election', 14491063620 + 10, 14491063620 +12).then(","  //         function() { ","  //           return organization.numProposals.call();","  //       }).then(","  //         function(num) { ","  //           assert.equal(num, 1, \"New numProposal wrong\")","  //           return organization.proposals(0)","  //       }).then(","  //         function(proposalAddress) { ","  //           var proposal = Proposal.at(proposalAddress)","  //           return proposal.name.call()","  //       }).then(","  //         function(name) { ","  //           assert.equal(name, 'board election', \"Proposal name is wrong\");","  //           done();","  //       }).catch(done);","  //   }).catch(done);","  // });","","  // it(\"Should forbid vote for non-member\", function(done) {","  //   var o = Organization.at(Organization.deployed_address);","  //   var p = {}","    ","  //   Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","  //     function(organization) {","  //       organization.makeProposal('board election', 14491063620 + 10, 14491063620 +12).then(","  //         function() { ","  //           return organization.proposals(0);","  //       }).then(","  //         function(proposalAddress) { ","  //           p = Proposal.at(proposalAddress)","  //           return organization.vote(true, 1, proposalAddress, {from: member1})            ","  //       }).then(","  //         function() { ","  //           return p.forVotes.call()","  //       }).then(","  //         function(numVotes) {  ","  //           assert.equal(numVotes, 0, \"Vote shouldn't be allowed\");","  //           done();","  //       }).catch(done);","  //   }).catch(done);","  // });","","  // it(\"Should allow vote for member\", function(done) {","  //   var o = Organization.at(Organization.deployed_address);","  //   var p = {}","    ","  //   Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","  //     function(organization) {","  //       organization.addMember(member1)","  //       .then(","  //         function() {","  //           return organization.toTime(0)","  //       }).then(","  //         function() { ","  //           return organization.makeProposal('board election', 4, 10);","  //       }).then(","  //         function() { ","  //           return organization.toTime(7)","  //       }).then(","  //         function() { ","  //           return organization.proposals(0)","  //       }).then(","  //         function(proposalAddress) { ","  //           p = Proposal.at(proposalAddress)","  //           p.toTime(7)","  //           return organization.proposals(0)           ","  //       }).then(","  //         function(proposalAddress) { ","  //           p = Proposal.at(proposalAddress)","  //           return organization.vote(true, 1, proposalAddress, {from: member1})            ","  //       }).then(","  //         function() { ","  //           return p.forVotes.call()","  //       }).then(","  //         function(numVotes) {  ","  //           assert.equal(numVotes.toString(10), 1, \"Vote should be allowed\");","  //           done();","  //       }).catch(done);","  //   }).catch(done);","  // });","","  // it(\"Should allow weighted vote for member\", function(done) {","  //   var o = Organization.at(Organization.deployed_address);","  //   var p = {}","    ","  //   Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","  //     function(organization) {","  //       organization.addMember(member1)","  //       .then(","  //         function() {","  //           return organization.toTime(0)","  //       }).then(","  //         function() {  ","  //           return organization.makeProposal('board election',  4, 10);","  //       }).then(","  //         function() { ","  //           return organization.toTime(7)","  //       }).then(","  //         function() { ","  //           return organization.proposals(0)","  //       }).then(","  //         function(proposalAddress) { ","  //           p = Proposal.at(proposalAddress)","  //           p.toTime(7)","  //           return organization.proposals(0)           ","  //       }).then(","  //         function(proposalAddress) { ","  //           console.log(proposalAddress)","  //           p = Proposal.at(proposalAddress)","  //           return organization.vote(true, 3, proposalAddress, {from: member1})            ","  //       }).then(","  //         function() { ","  //           return organization.balances.call(member1)","  //       }).then(","  //         function(balance) { ","  //           assert.equal(balance, 91, \"Wrong balance after vote\")","  //           return p.bal.call()","  //       }).then(","  //         function(propbalance) { ","  //           assert.equal(propbalance.toString(10), 9, \"Wrong propbalance after vote\")","  //           return p.forVotes.call()","  //       }).then(","  //         function(numVotes) {  ","  //           assert.equal(numVotes, 3, \"Vote should be allowed\");","  //           done();","  //       }).catch(done);","  //   }).catch(done);","  // });"],"id":154}],[{"start":{"row":0,"column":0},"end":{"row":124,"column":0},"action":"remove","lines":["contract('organization', function(accounts) {","  console.log(accounts);","  var organizer = accounts[0];","  var member1 = accounts[1];","  var member2 = accounts[2];","","","","","  it(\"Should allow weighted vote for member\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    var p = {}","    ","    Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","      function(organization) {","        organization.addMember(member1).then(","          function() {","            return organization.toTime(0)","        }).then(","          organization.addMember(member2)).then(","          function() { ","            return organization.makeProposal('board election', 4, 10);","        }).then(","          function() { ","            return organization.toTime(7)","        }).then(","          function() { ","            return organization.proposals(0)","        }).then(","          function(proposalAddress) { ","            console.log(proposalAddress)","            p = Proposal.at(proposalAddress)","            p.toTime(7)","            organization.vote(true, 3, proposalAddress, {from: member1}) ","            return proposalAddress         ","        }).then(","          function(proposalAddress) {","            return organization.vote(false, 2, proposalAddress, {from: member2})   ","        }).then(","          function() { ","            return organization.balances.call(member1)","        }).then(","          function(balance) { ","            assert.equal(balance, 91, \"Wrong balance after vote\")","            return organization.balances.call(member2)","        }).then(","          function(balance) { ","            assert.equal(balance, 96, \"Wrong balance after vote\")","            return p.bal.call()","        }).then(","          function(propbalance) { ","            assert.equal(propbalance, 13, \"Wrong propbalance after vote\")","            return p.forVotes.call()","        }).then(","          function(numVotes) {  ","            assert.equal(numVotes, 3, \"Vote should be allowed\");","            done();","        }).catch(done);","    }).catch(done);","  });","","it(\"Should get result and redistribute tokens\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    var p = {}","    var paddress = {}","    ","    Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","      function(organization) {","        organization.addMember(member1).then(","          function() {","            return organization.toTime(0)","        }).then(","          function() {","            return organization.addMember(member2)","        }).then(","          function() { ","            return organization.makeProposal('board election', 4, 10);","        }).then(","          function() { ","            return organization.toTime(7)","        }).then(","          function() { ","            return organization.proposals(0)","        }).then(","          function(proposalAddress) { ","            console.log(proposalAddress)","            paddress = proposalAddress","            p = Proposal.at(proposalAddress)","            p.toTime(7)","            organization.vote(true, 4, proposalAddress, {from: member1})          ","            organization.vote(false, 2, proposalAddress, {from: member2})            ","        }).then(","          function() {","            return organization.balances.call(member1)","        }).then(","          function(balance) { ","            assert.equal(balance, 84, \"Wrong balance after vote for member1\")","            return organization.balances.call(member2)","        }).then(","          function(balance) {","            assert.equal(balance, 96, \"Wrong balance after vote for member2\")","            organization.toTime(13)","            p.toTime(13)","            organization.getResult(paddress)","            return organization.propResults.call(paddress)","        }).then(","          function(result) {  ","            assert.equal(result, 1, \"Proposal should be adopted\");","            return p.bal.call()","        }).then(","          function() { ","            return organization.balances.call(member1)","          }).then(","          function(newbalance1) { ","            assert.equal(newbalance1.toString(10), 94, \"Wrong balance after vote for member2\")","            return organization.balances.call(member2)","          }).then(","          function(newbalance2) { ","            assert.equal(newbalance2, 106, \"Wrong balance after vote for member2\")","            done();","        }).catch(done);","    }).catch(done);","  });","});",""],"id":155},{"start":{"row":0,"column":0},"end":{"row":352,"column":0},"action":"insert","lines":["contract('organization', function(accounts) {","  console.log(accounts);","  var organizer = accounts[0];","  var member1 = accounts[1];","  var member2 = accounts[2];","","  it(\"Initial organization settings should match\", function(done) {","","    var o = Organization.at(Organization.deployed_address);","    ","    Organization.new({from: organizer}).then(","      function(organization) {","        organization.token_count.call().then(","          function(count) { ","            assert.equal(count, 0, \"Count doesn't match!\"); ","        }).then(","          function() { ","            return organization.numMembers.call(); ","        }).then(","          function(num) { ","            assert.equal(num, 0, \"Members doesn't match!\");","            return organization.organizer.call();","        }).then(","          function(organizer) { ","            assert.equal(organizer, organizer, \"Organizer doesn't match!\");","            done();","        }).catch(done);","    }).catch(done);","  });","","  it(\"Should update token_count, numMembers and balance upon adding member\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    ","    Organization.new({from: organizer}).then(","      function(organization) {","        organization.token_count.call().then(","          function(count) { ","            assert.equal(count, 0, \"Count doesn't match!\"); ","        }).then(","          function() { ","            return organization.addMember(member1);","        }).then(","          function() { ","            return organization.token_count.call()","        }).then(","          function(count) { ","            assert.equal(count, 100, \"New token_count is not correct!\");","            return organization.numMembers.call()","        }).then(","          function(num) { ","            assert.equal(num, 1, \"New numMembers is not correct!\");","            return organization.members.call(member1)","        }).then(","          function(isMember) { ","            assert.equal(isMember, true, \"Member 1 is not registered\");","            return organization.balances.call(member1)","        }).then(","          function(balance) { ","            assert.equal(balance, 100, \"Balance is wrong\");","            done()","        }).catch(done);","    }).catch(done);","  });","","  it(\"Should update token_count, numMembers and balance upon removing member\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    ","    Organization.new({from: organizer}).then(","      function(organization) {","        organization.token_count.call().then(","          function(count) { ","            assert.equal(count, 0, \"Count doesn't match!\"); ","        }).then(","          function() { ","            return organization.addMember(member1);","        }).then(","          function() { ","            return organization.removeMember(member1);","        }).then(","          function() { ","            return organization.token_count.call()","        }).then(","          function(count) { ","            assert.equal(count, 0, \"New token_count is not correct!\");","            return organization.numMembers.call()","        }).then(","          function(num) { ","            assert.equal(num, 0, \"New numMembers is not correct!\");","            return organization.members.call(member1)","        }).then(","          function(isMember) { ","            assert.equal(isMember, false, \"Member 1 is not registered\");","            return organization.balances.call(member1)","        }).then(","          function(balance) { ","            assert.equal(balance, 0, \"Balance is wrong\");","            done()","        }).catch(done);","    }).catch(done);","  });","","  it(\"Should update proposal array when creating proposal\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    ","    Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","      function(organization) {","        organization.makeProposal('board election', 14491063620 + 10, 14491063620 +12).then(","          function() { ","            return organization.numProposals.call();","        }).then(","          function(num) { ","            assert.equal(num, 1, \"New numProposal wrong\")","            return organization.proposals(0)","        }).then(","          function(proposalAddress) { ","            var proposal = Proposal.at(proposalAddress)","            return proposal.name.call()","        }).then(","          function(name) { ","            assert.equal(name, 'board election', \"Proposal name is wrong\");","            done();","        }).catch(done);","    }).catch(done);","  });","","  it(\"Should forbid vote for non-member\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    var p = {}","    ","    Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","      function(organization) {","        organization.makeProposal('board election', 14491063620 + 10, 14491063620 +12).then(","          function() { ","            return organization.proposals(0);","        }).then(","          function(proposalAddress) { ","            p = Proposal.at(proposalAddress)","            return organization.vote(true, 1, proposalAddress, {from: member1})            ","        }).then(","          function() { ","            return p.forVotes.call()","        }).then(","          function(numVotes) {  ","            assert.equal(numVotes, 0, \"Vote shouldn't be allowed\");","            done();","        }).catch(done);","    }).catch(done);","  });","","  it(\"Should allow vote for member\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    var p = {}","    ","    Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","      function(organization) {","        organization.addMember(member1)","        .then(","          function() {","            return organization.toTime(0)","        }).then(","          function() { ","            return organization.makeProposal('board election', 4, 10);","        }).then(","          function() { ","            return organization.toTime(7)","        }).then(","          function() { ","            return organization.proposals(0)","        }).then(","          function(proposalAddress) { ","            p = Proposal.at(proposalAddress)","            p.toTime(7)","            return organization.proposals(0)           ","        }).then(","          function(proposalAddress) { ","            p = Proposal.at(proposalAddress)","            return organization.vote(true, 1, proposalAddress, {from: member1})            ","        }).then(","          function() { ","            return p.forVotes.call()","        }).then(","          function(numVotes) {  ","            assert.equal(numVotes.toString(10), 1, \"Vote should be allowed\");","            done();","        }).catch(done);","    }).catch(done);","  });","","  it(\"Should allow weighted vote for member\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    var p = {}","    ","    Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","      function(organization) {","        organization.addMember(member1)","        .then(","          function() {","            return organization.toTime(0)","        }).then(","          function() {  ","            return organization.makeProposal('board election',  4, 10);","        }).then(","          function() { ","            return organization.toTime(7)","        }).then(","          function() { ","            return organization.proposals(0)","        }).then(","          function(proposalAddress) { ","            p = Proposal.at(proposalAddress)","            p.toTime(7)","            return organization.proposals(0)           ","        }).then(","          function(proposalAddress) { ","            console.log(proposalAddress)","            p = Proposal.at(proposalAddress)","            return organization.vote(true, 3, proposalAddress, {from: member1})            ","        }).then(","          function() { ","            return organization.balances.call(member1)","        }).then(","          function(balance) { ","            assert.equal(balance, 91, \"Wrong balance after vote\")","            return p.bal.call()","        }).then(","          function(propbalance) { ","            assert.equal(propbalance.toString(10), 9, \"Wrong propbalance after vote\")","            return p.forVotes.call()","        }).then(","          function(numVotes) {  ","            assert.equal(numVotes, 3, \"Vote should be allowed\");","            done();","        }).catch(done);","    }).catch(done);","  });","","","  it(\"Should allow weighted vote for member\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    var p = {}","    ","    Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","      function(organization) {","        organization.addMember(member1).then(","          function() {","            return organization.toTime(0)","        }).then(","          organization.addMember(member2)).then(","          function() { ","            return organization.makeProposal('board election', 4, 10);","        }).then(","          function() { ","            return organization.toTime(7)","        }).then(","          function() { ","            return organization.proposals(0)","        }).then(","          function(proposalAddress) { ","            console.log(proposalAddress)","            p = Proposal.at(proposalAddress)","            p.toTime(7)","            organization.vote(true, 3, proposalAddress, {from: member1}) ","            return proposalAddress         ","        }).then(","          function(proposalAddress) {","            return organization.vote(false, 2, proposalAddress, {from: member2})   ","        }).then(","          function() { ","            return organization.balances.call(member1)","        }).then(","          function(balance) { ","            assert.equal(balance, 91, \"Wrong balance after vote\")","            return organization.balances.call(member2)","        }).then(","          function(balance) { ","            assert.equal(balance, 96, \"Wrong balance after vote\")","            return p.bal.call()","        }).then(","          function(propbalance) { ","            assert.equal(propbalance, 13, \"Wrong propbalance after vote\")","            return p.forVotes.call()","        }).then(","          function(numVotes) {  ","            assert.equal(numVotes, 3, \"Vote should be allowed\");","            done();","        }).catch(done);","    }).catch(done);","  });","","it(\"Should get result and redistribute tokens\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    var p = {}","    var paddress = {}","    ","    Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","      function(organization) {","        organization.addMember(member1).then(","          function() {","            return organization.toTime(0)","        }).then(","          function() {","            return organization.addMember(member2)","        }).then(","          function() { ","            return organization.makeProposal('board election', 4, 10);","        }).then(","          function() { ","            return organization.toTime(7)","        }).then(","          function() { ","            return organization.proposals(0)","        }).then(","          function(proposalAddress) { ","            console.log(proposalAddress)","            paddress = proposalAddress","            p = Proposal.at(proposalAddress)","            p.toTime(7)","            organization.vote(true, 4, proposalAddress, {from: member1})          ","            organization.vote(false, 2, proposalAddress, {from: member2})            ","        }).then(","          function() {","            return organization.balances.call(member1)","        }).then(","          function(balance) { ","            assert.equal(balance, 84, \"Wrong balance after vote for member1\")","            return organization.balances.call(member2)","        }).then(","          function(balance) {","            assert.equal(balance, 96, \"Wrong balance after vote for member2\")","            organization.toTime(13)","            p.toTime(13)","            organization.getResult(paddress)","            return organization.propResults.call(paddress)","        }).then(","          function(result) {  ","            assert.equal(result, 1, \"Proposal should be adopted\");","            return p.bal.call()","        }).then(","          function() { ","            return organization.balances.call(member1)","          }).then(","          function(newbalance1) { ","            assert.equal(newbalance1.toString(10), 94, \"Wrong balance after vote for member2\")","            return organization.balances.call(member2)","          }).then(","          function(newbalance2) { ","            assert.equal(newbalance2, 106, \"Wrong balance after vote for member2\")","            done();","        }).catch(done);","    }).catch(done);","  });","});",""]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":352,"column":0},"end":{"row":352,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1449120238820,"hash":"009aced19f1541491c89529685c935455cdcebe3"}