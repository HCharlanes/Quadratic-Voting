{"filter":false,"title":"organization.js","tooltip":"/test/organization.js","undoManager":{"mark":100,"position":100,"stack":[[{"start":{"row":251,"column":35},"end":{"row":251,"column":36},"action":"insert","lines":["6"],"id":394}],[{"start":{"row":266,"column":40},"end":{"row":266,"column":41},"action":"remove","lines":["1"],"id":395}],[{"start":{"row":266,"column":40},"end":{"row":266,"column":41},"action":"insert","lines":["6"],"id":396}],[{"start":{"row":267,"column":12},"end":{"row":268,"column":65},"action":"remove","lines":["organization.getResult()","            return organization.propResults.call(proposalAddress)"],"id":397},{"start":{"row":267,"column":12},"end":{"row":267,"column":13},"action":"insert","lines":["d"]}],[{"start":{"row":267,"column":13},"end":{"row":267,"column":14},"action":"insert","lines":["o"],"id":398}],[{"start":{"row":267,"column":14},"end":{"row":267,"column":15},"action":"insert","lines":["n"],"id":399}],[{"start":{"row":267,"column":15},"end":{"row":267,"column":16},"action":"insert","lines":["e"],"id":400}],[{"start":{"row":267,"column":16},"end":{"row":267,"column":18},"action":"insert","lines":["()"],"id":401}],[{"start":{"row":267,"column":18},"end":{"row":267,"column":19},"action":"insert","lines":[";"],"id":402}],[{"start":{"row":223,"column":19},"end":{"row":223,"column":43},"action":"remove","lines":["weighted vote for member"],"id":403}],[{"start":{"row":223,"column":18},"end":{"row":223,"column":19},"action":"remove","lines":[" "],"id":404}],[{"start":{"row":223,"column":17},"end":{"row":223,"column":18},"action":"remove","lines":["w"],"id":405}],[{"start":{"row":223,"column":16},"end":{"row":223,"column":17},"action":"remove","lines":["o"],"id":406}],[{"start":{"row":223,"column":15},"end":{"row":223,"column":16},"action":"remove","lines":["l"],"id":407}],[{"start":{"row":223,"column":14},"end":{"row":223,"column":15},"action":"remove","lines":["l"],"id":408}],[{"start":{"row":223,"column":13},"end":{"row":223,"column":14},"action":"remove","lines":["a"],"id":409}],[{"start":{"row":223,"column":13},"end":{"row":223,"column":14},"action":"insert","lines":["r"],"id":410}],[{"start":{"row":223,"column":14},"end":{"row":223,"column":15},"action":"insert","lines":["e"],"id":411}],[{"start":{"row":223,"column":15},"end":{"row":223,"column":16},"action":"insert","lines":["d"],"id":412}],[{"start":{"row":223,"column":16},"end":{"row":223,"column":17},"action":"insert","lines":["i"],"id":413}],[{"start":{"row":223,"column":17},"end":{"row":223,"column":18},"action":"insert","lines":["s"],"id":414}],[{"start":{"row":223,"column":18},"end":{"row":223,"column":19},"action":"insert","lines":["t"],"id":415}],[{"start":{"row":223,"column":19},"end":{"row":223,"column":20},"action":"insert","lines":["r"],"id":416}],[{"start":{"row":223,"column":20},"end":{"row":223,"column":21},"action":"insert","lines":["i"],"id":417}],[{"start":{"row":223,"column":21},"end":{"row":223,"column":22},"action":"insert","lines":["b"],"id":418}],[{"start":{"row":223,"column":22},"end":{"row":223,"column":23},"action":"insert","lines":["u"],"id":419}],[{"start":{"row":223,"column":23},"end":{"row":223,"column":24},"action":"insert","lines":["t"],"id":420}],[{"start":{"row":223,"column":24},"end":{"row":223,"column":25},"action":"insert","lines":["e"],"id":421}],[{"start":{"row":223,"column":25},"end":{"row":223,"column":26},"action":"insert","lines":[" "],"id":422}],[{"start":{"row":223,"column":26},"end":{"row":223,"column":27},"action":"insert","lines":["t"],"id":423}],[{"start":{"row":223,"column":27},"end":{"row":223,"column":28},"action":"insert","lines":["o"],"id":424}],[{"start":{"row":223,"column":28},"end":{"row":223,"column":29},"action":"insert","lines":["k"],"id":425}],[{"start":{"row":223,"column":29},"end":{"row":223,"column":30},"action":"insert","lines":["e"],"id":426}],[{"start":{"row":223,"column":30},"end":{"row":223,"column":31},"action":"insert","lines":["n"],"id":427}],[{"start":{"row":223,"column":31},"end":{"row":223,"column":32},"action":"insert","lines":[" "],"id":428}],[{"start":{"row":223,"column":32},"end":{"row":223,"column":33},"action":"insert","lines":["a"],"id":429}],[{"start":{"row":223,"column":33},"end":{"row":223,"column":34},"action":"insert","lines":["f"],"id":430}],[{"start":{"row":223,"column":34},"end":{"row":223,"column":35},"action":"insert","lines":["t"],"id":431}],[{"start":{"row":223,"column":34},"end":{"row":223,"column":35},"action":"remove","lines":["t"],"id":432}],[{"start":{"row":223,"column":33},"end":{"row":223,"column":34},"action":"remove","lines":["f"],"id":433}],[{"start":{"row":223,"column":32},"end":{"row":223,"column":33},"action":"remove","lines":["a"],"id":434}],[{"start":{"row":223,"column":31},"end":{"row":223,"column":32},"action":"remove","lines":[" "],"id":435}],[{"start":{"row":223,"column":30},"end":{"row":223,"column":31},"action":"remove","lines":["n"],"id":436}],[{"start":{"row":223,"column":29},"end":{"row":223,"column":30},"action":"remove","lines":["e"],"id":437}],[{"start":{"row":223,"column":28},"end":{"row":223,"column":29},"action":"remove","lines":["k"],"id":438}],[{"start":{"row":223,"column":27},"end":{"row":223,"column":28},"action":"remove","lines":["o"],"id":439}],[{"start":{"row":223,"column":26},"end":{"row":223,"column":27},"action":"remove","lines":["t"],"id":440}],[{"start":{"row":223,"column":25},"end":{"row":223,"column":26},"action":"remove","lines":[" "],"id":441}],[{"start":{"row":223,"column":24},"end":{"row":223,"column":25},"action":"remove","lines":["e"],"id":442}],[{"start":{"row":223,"column":23},"end":{"row":223,"column":24},"action":"remove","lines":["t"],"id":443}],[{"start":{"row":223,"column":22},"end":{"row":223,"column":23},"action":"remove","lines":["u"],"id":444}],[{"start":{"row":223,"column":21},"end":{"row":223,"column":22},"action":"remove","lines":["b"],"id":445}],[{"start":{"row":223,"column":20},"end":{"row":223,"column":21},"action":"remove","lines":["i"],"id":446}],[{"start":{"row":223,"column":19},"end":{"row":223,"column":20},"action":"remove","lines":["r"],"id":447}],[{"start":{"row":223,"column":18},"end":{"row":223,"column":19},"action":"remove","lines":["t"],"id":448}],[{"start":{"row":223,"column":17},"end":{"row":223,"column":18},"action":"remove","lines":["s"],"id":449}],[{"start":{"row":223,"column":16},"end":{"row":223,"column":17},"action":"remove","lines":["i"],"id":450}],[{"start":{"row":223,"column":15},"end":{"row":223,"column":16},"action":"remove","lines":["d"],"id":451}],[{"start":{"row":223,"column":14},"end":{"row":223,"column":15},"action":"remove","lines":["e"],"id":452}],[{"start":{"row":223,"column":13},"end":{"row":223,"column":14},"action":"remove","lines":["r"],"id":453}],[{"start":{"row":223,"column":13},"end":{"row":223,"column":14},"action":"insert","lines":["g"],"id":454}],[{"start":{"row":223,"column":14},"end":{"row":223,"column":15},"action":"insert","lines":["e"],"id":455}],[{"start":{"row":223,"column":15},"end":{"row":223,"column":16},"action":"insert","lines":["t"],"id":456}],[{"start":{"row":223,"column":16},"end":{"row":223,"column":17},"action":"insert","lines":[" "],"id":457}],[{"start":{"row":223,"column":17},"end":{"row":223,"column":18},"action":"insert","lines":["r"],"id":458}],[{"start":{"row":223,"column":18},"end":{"row":223,"column":19},"action":"insert","lines":["e"],"id":459}],[{"start":{"row":223,"column":19},"end":{"row":223,"column":20},"action":"insert","lines":["s"],"id":460}],[{"start":{"row":223,"column":20},"end":{"row":223,"column":21},"action":"insert","lines":["u"],"id":461}],[{"start":{"row":223,"column":21},"end":{"row":223,"column":22},"action":"insert","lines":["l"],"id":462}],[{"start":{"row":223,"column":22},"end":{"row":223,"column":23},"action":"insert","lines":["t"],"id":463}],[{"start":{"row":223,"column":23},"end":{"row":223,"column":24},"action":"insert","lines":[" "],"id":464}],[{"start":{"row":223,"column":24},"end":{"row":223,"column":25},"action":"insert","lines":["a"],"id":465}],[{"start":{"row":223,"column":25},"end":{"row":223,"column":26},"action":"insert","lines":["n"],"id":466}],[{"start":{"row":223,"column":26},"end":{"row":223,"column":27},"action":"insert","lines":["d"],"id":467}],[{"start":{"row":223,"column":27},"end":{"row":223,"column":28},"action":"insert","lines":[" "],"id":468}],[{"start":{"row":223,"column":28},"end":{"row":223,"column":29},"action":"insert","lines":["r"],"id":469}],[{"start":{"row":223,"column":29},"end":{"row":223,"column":30},"action":"insert","lines":["e"],"id":470}],[{"start":{"row":223,"column":30},"end":{"row":223,"column":31},"action":"insert","lines":["d"],"id":471}],[{"start":{"row":223,"column":31},"end":{"row":223,"column":32},"action":"insert","lines":["i"],"id":472}],[{"start":{"row":223,"column":32},"end":{"row":223,"column":33},"action":"insert","lines":["s"],"id":473}],[{"start":{"row":223,"column":33},"end":{"row":223,"column":34},"action":"insert","lines":["t"],"id":474}],[{"start":{"row":223,"column":34},"end":{"row":223,"column":35},"action":"insert","lines":["r"],"id":475}],[{"start":{"row":223,"column":35},"end":{"row":223,"column":36},"action":"insert","lines":["i"],"id":476}],[{"start":{"row":223,"column":36},"end":{"row":223,"column":37},"action":"insert","lines":["b"],"id":477}],[{"start":{"row":223,"column":37},"end":{"row":223,"column":38},"action":"insert","lines":["u"],"id":478}],[{"start":{"row":223,"column":38},"end":{"row":223,"column":39},"action":"insert","lines":["t"],"id":479}],[{"start":{"row":223,"column":39},"end":{"row":223,"column":40},"action":"insert","lines":["e"],"id":480}],[{"start":{"row":223,"column":40},"end":{"row":223,"column":41},"action":"insert","lines":[" "],"id":481}],[{"start":{"row":223,"column":41},"end":{"row":223,"column":42},"action":"insert","lines":["t"],"id":482}],[{"start":{"row":223,"column":42},"end":{"row":223,"column":43},"action":"insert","lines":["o"],"id":483}],[{"start":{"row":223,"column":43},"end":{"row":223,"column":44},"action":"insert","lines":["k"],"id":484}],[{"start":{"row":223,"column":44},"end":{"row":223,"column":45},"action":"insert","lines":["e"],"id":485}],[{"start":{"row":223,"column":45},"end":{"row":223,"column":46},"action":"insert","lines":["n"],"id":486}],[{"start":{"row":223,"column":46},"end":{"row":223,"column":47},"action":"insert","lines":["s"],"id":487}],[{"start":{"row":214,"column":16},"end":{"row":345,"column":10},"action":"insert","linesid":488,"ignore":true}],[{"start":{"row":304,"column":10},"end":{"row":345,"column":10},"action":"remove","linesid":489,"ignore":true}],[{"start":{"row":214,"column":16},"end":{"row":304,"column":10},"action":"remove","linesid":490,"ignore":true},{"start":{"row":223,"column":0},"end":{"row":223,"column":2},"action":"remove","lines":["  "]},{"start":{"row":223,"column":0},"end":{"row":223,"column":2},"action":"insert","lines":["  "]}],[{"start":{"row":223,"column":0},"end":{"row":223,"column":2},"action":"remove","lines":["  "],"id":491,"ignore":true},{"start":{"row":223,"column":0},"end":{"row":223,"column":2},"action":"insert","lines":["  "]}],[{"start":{"row":0,"column":0},"end":{"row":272,"column":0},"action":"remove","lines":["contract('organization', function(accounts) {","\tconsole.log(accounts);","\tvar organizer = accounts[0];","  var member1 = accounts[1];","  var member2 = accounts[2];","","  it(\"Initial organization settings should match\", function(done) {","","    var o = Organization.at(Organization.deployed_address);","  \t","  \tOrganization.new({from: organizer}).then(","  \t\tfunction(organization) {","  \t\t\torganization.token_count.call().then(","  \t\t\t\tfunction(count) { ","  \t\t\t\t\tassert.equal(count, 0, \"Count doesn't match!\"); ","  \t\t\t}).then(","  \t\t\t\tfunction() { ","  \t\t\t\t\treturn organization.numMembers.call(); ","  \t\t\t}).then(","  \t\t\t\tfunction(num) { ","  \t\t\t\t\tassert.equal(num, 0, \"Members doesn't match!\");","  \t\t\t\t\treturn organization.organizer.call();","  \t\t\t}).then(","  \t\t\t\tfunction(organizer) { ","  \t\t\t\t\tassert.equal(organizer, organizer, \"Organizer doesn't match!\");","  \t\t\t\t\tdone();","  \t\t\t}).catch(done);","  \t}).catch(done);","  });","","  it(\"Should update token_count, numMembers and balance upon adding member\", function(done) {","    var o = Organization.at(Organization.deployed_address);","  \t","  \tOrganization.new({from: organizer}).then(","  \t\tfunction(organization) {","  \t\t\torganization.token_count.call().then(","  \t\t\t\tfunction(count) { ","  \t\t\t\t\tassert.equal(count, 0, \"Count doesn't match!\"); ","  \t\t\t}).then(","  \t\t\t\tfunction() { ","  \t\t\t\t\treturn organization.addMember(member1);","  \t\t\t}).then(","  \t\t\t\tfunction() { ","  \t\t\t\t\treturn organization.token_count.call()","  \t\t\t}).then(","          function(count) { ","            assert.equal(count, 100, \"New token_count is not correct!\");","            return organization.numMembers.call()","        }).then(","          function(num) { ","            assert.equal(num, 1, \"New numMembers is not correct!\");","            return organization.members.call(member1)","        }).then(","          function(isMember) { ","            assert.equal(isMember, true, \"Member 1 is not registered\");","            return organization.balances.call(member1)","        }).then(","          function(balance) { ","            assert.equal(balance, 100, \"Balance is wrong\");","            done()","        }).catch(done);","  \t}).catch(done);","  });","","  it(\"Should update token_count, numMembers and balance upon removing member\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    ","    Organization.new({from: organizer}).then(","      function(organization) {","        organization.token_count.call().then(","          function(count) { ","            assert.equal(count, 0, \"Count doesn't match!\"); ","        }).then(","          function() { ","            return organization.addMember(member1);","        }).then(","          function() { ","            return organization.removeMember(member1);","        }).then(","          function() { ","            return organization.token_count.call()","        }).then(","          function(count) { ","            assert.equal(count, 0, \"New token_count is not correct!\");","            return organization.numMembers.call()","        }).then(","          function(num) { ","            assert.equal(num, 0, \"New numMembers is not correct!\");","            return organization.members.call(member1)","        }).then(","          function(isMember) { ","            assert.equal(isMember, false, \"Member 1 is not registered\");","            return organization.balances.call(member1)","        }).then(","          function(balance) { ","            assert.equal(balance, 0, \"Balance is wrong\");","            done()","        }).catch(done);","    }).catch(done);","  });","","  it(\"Should update proposal array when creating proposal\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    ","    Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","      function(organization) {","        organization.token_count.call().then(","          function(count) { ","            assert.equal(count, 0, \"Count doesn't match!\"); ","        }).then(","          function() { ","            return organization.makeProposal('board election');","        }).then(","          function() { ","            return organization.numProposals.call();","        }).then(","          function(num) { ","            assert.equal(num, 1, \"New numProposal wrong\")","            return organization.proposals(0)","        }).then(","          function(proposalAddress) { ","            var proposal = Proposal.at(proposalAddress)","            return proposal.name.call()","        }).then(","          function(name) { ","            assert.equal(name, 'board election', \"Proposal name is wrong\");","            done();","        }).catch(done);","    }).catch(done);","  });","","  it(\"Should forbid vote for non-member\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    var p = {}","    ","    Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","      function(organization) {","            organization.makeProposal('board election').then(","          function() { ","            return organization.proposals(0)","        }).then(","          function(proposalAddress) { ","            p = Proposal.at(proposalAddress)","            return organization.vote(true, 1, proposalAddress, {from: member1})            ","        }).then(","          function() { ","            console.log(\"4\")","","            return p.forVotes.call()","        }).then(","          function(numVotes) {  ","                                    console.log(\"5\")","","            assert.equal(numVotes, 0, \"Vote shouldn't be allowed\");","            done();","        }).catch(done);","    }).catch(done);","  });","","  it(\"Should allow vote for member\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    var p = {}","    ","    Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","      function(organization) {","        organization.addMember(member1).then(","          function() { ","            return organization.makeProposal('board election');","        }).then(","          function() { ","            return organization.proposals(0)","        }).then(","          function(proposalAddress) { ","            p = Proposal.at(proposalAddress)","            return organization.vote(true, 1, proposalAddress, {from: member1})            ","        }).then(","          function() { ","            return p.forVotes.call()","        }).then(","          function(numVotes) {  ","            assert.equal(numVotes, 1, \"Vote should be allowed\");","            done();","        }).catch(done);","    }).catch(done);","  });","","  it(\"Should allow weighted vote for member\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    var p = {}","    ","    Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","      function(organization) {","        organization.addMember(member1).then(","          function() { ","            return organization.makeProposal('board election');","        }).then(","          function() { ","            return organization.proposals(0)","        }).then(","          function(proposalAddress) { ","            console.log(proposalAddress)","            p = Proposal.at(proposalAddress)","            return organization.vote(true, 3, proposalAddress, {from: member1})            ","        }).then(","          function() { ","            return organization.balances.call(member1)","        }).then(","          function(balance) { ","            assert.equal(balance, 91, \"Wrong balance after vote\")","            return p.balance.call()","        }).then(","          function(propbalance) { ","            assert.equal(propbalance, 9, \"Wrong propbalance after vote\")","            return p.forVotes.call()","        }).then(","          function(numVotes) {  ","            assert.equal(numVotes, 3, \"Vote should be allowed\");","            done();","        }).catch(done);","    }).catch(done);","  });","","","  it(\"Should get result and redistribute tokens\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    var p = {}","    ","    Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","      function(organization) {","        organization.addMember(member1).then(","          organization.addMember(member2)).then(","          function() { ","            return organization.makeProposal('board election');","        }).then(","          function() { ","            return organization.proposals(0)","        }).then(","          function(proposalAddress) { ","            console.log(proposalAddress)","            p = Proposal.at(proposalAddress)","            organization.vote(true, 4, proposalAddress, {from: member1})          ","            organization.vote(false, 2, proposalAddress, {from: member2})            ","        }).then(","          function() { ","            return organization.balances.call(member1)","        }).then(","          function(balance) { ","            assert.equal(balance, 84, \"Wrong balance after vote for member1\")","            return organization.balances.call(member2)","        }).then(","          function(balance) { ","            assert.equal(balance, 96, \"Wrong balance after vote for member2\")","            organization.getResult()","            return organization.propResults.call(proposalAddress)","        }).then(","          function(result) {  ","            assert.equal(result, 1, \"Proposal should be adopted\");","          }).then(","          function(dispatch) { ","            return organization.balances.call(member1)","          }).then(","          function(newbalance1) { ","            assert.equal(newbalance1, 94, \"Wrong balance after vote for member2\")","            return organization.balances.call(member2)","          }).then(","          function(newbalance2) { ","            assert.equal(newbalance2, 106, \"Wrong balance after vote for member2\")","            done();","        }).catch(done);","    }).catch(done);","  });","});",""],"id":492,"ignore":true},{"start":{"row":0,"column":0},"end":{"row":352,"column":0},"action":"insert","lines":["contract('organization', function(accounts) {","  console.log(accounts);","  var organizer = accounts[0];","  var member1 = accounts[1];","  var member2 = accounts[2];","","  // it(\"Initial organization settings should match\", function(done) {","","  //   var o = Organization.at(Organization.deployed_address);","    ","  //   Organization.new({from: organizer}).then(","  //     function(organization) {","  //       organization.token_count.call().then(","  //         function(count) { ","  //           assert.equal(count, 0, \"Count doesn't match!\"); ","  //       }).then(","  //         function() { ","  //           return organization.numMembers.call(); ","  //       }).then(","  //         function(num) { ","  //           assert.equal(num, 0, \"Members doesn't match!\");","  //           return organization.organizer.call();","  //       }).then(","  //         function(organizer) { ","  //           assert.equal(organizer, organizer, \"Organizer doesn't match!\");","  //           done();","  //       }).catch(done);","  //   }).catch(done);","  // });","","  // it(\"Should update token_count, numMembers and balance upon adding member\", function(done) {","  //   var o = Organization.at(Organization.deployed_address);","    ","  //   Organization.new({from: organizer}).then(","  //     function(organization) {","  //       organization.token_count.call().then(","  //         function(count) { ","  //           assert.equal(count, 0, \"Count doesn't match!\"); ","  //       }).then(","  //         function() { ","  //           return organization.addMember(member1);","  //       }).then(","  //         function() { ","  //           return organization.token_count.call()","  //       }).then(","  //         function(count) { ","  //           assert.equal(count, 100, \"New token_count is not correct!\");","  //           return organization.numMembers.call()","  //       }).then(","  //         function(num) { ","  //           assert.equal(num, 1, \"New numMembers is not correct!\");","  //           return organization.members.call(member1)","  //       }).then(","  //         function(isMember) { ","  //           assert.equal(isMember, true, \"Member 1 is not registered\");","  //           return organization.balances.call(member1)","  //       }).then(","  //         function(balance) { ","  //           assert.equal(balance, 100, \"Balance is wrong\");","  //           done()","  //       }).catch(done);","  //   }).catch(done);","  // });","","  // it(\"Should update token_count, numMembers and balance upon removing member\", function(done) {","  //   var o = Organization.at(Organization.deployed_address);","    ","  //   Organization.new({from: organizer}).then(","  //     function(organization) {","  //       organization.token_count.call().then(","  //         function(count) { ","  //           assert.equal(count, 0, \"Count doesn't match!\"); ","  //       }).then(","  //         function() { ","  //           return organization.addMember(member1);","  //       }).then(","  //         function() { ","  //           return organization.removeMember(member1);","  //       }).then(","  //         function() { ","  //           return organization.token_count.call()","  //       }).then(","  //         function(count) { ","  //           assert.equal(count, 0, \"New token_count is not correct!\");","  //           return organization.numMembers.call()","  //       }).then(","  //         function(num) { ","  //           assert.equal(num, 0, \"New numMembers is not correct!\");","  //           return organization.members.call(member1)","  //       }).then(","  //         function(isMember) { ","  //           assert.equal(isMember, false, \"Member 1 is not registered\");","  //           return organization.balances.call(member1)","  //       }).then(","  //         function(balance) { ","  //           assert.equal(balance, 0, \"Balance is wrong\");","  //           done()","  //       }).catch(done);","  //   }).catch(done);","  // });","","  // it(\"Should update proposal array when creating proposal\", function(done) {","  //   var o = Organization.at(Organization.deployed_address);","    ","  //   Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","  //     function(organization) {","  //       organization.makeProposal('board election', 14491063620 + 10, 14491063620 +12).then(","  //         function() { ","  //           return organization.numProposals.call();","  //       }).then(","  //         function(num) { ","  //           assert.equal(num, 1, \"New numProposal wrong\")","  //           return organization.proposals(0)","  //       }).then(","  //         function(proposalAddress) { ","  //           var proposal = Proposal.at(proposalAddress)","  //           return proposal.name.call()","  //       }).then(","  //         function(name) { ","  //           assert.equal(name, 'board election', \"Proposal name is wrong\");","  //           done();","  //       }).catch(done);","  //   }).catch(done);","  // });","","  // it(\"Should forbid vote for non-member\", function(done) {","  //   var o = Organization.at(Organization.deployed_address);","  //   var p = {}","    ","  //   Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","  //     function(organization) {","  //       organization.makeProposal('board election', 14491063620 + 10, 14491063620 +12).then(","  //         function() { ","  //           return organization.proposals(0);","  //       }).then(","  //         function(proposalAddress) { ","  //           p = Proposal.at(proposalAddress)","  //           return organization.vote(true, 1, proposalAddress, {from: member1})            ","  //       }).then(","  //         function() { ","  //           return p.forVotes.call()","  //       }).then(","  //         function(numVotes) {  ","  //           assert.equal(numVotes, 0, \"Vote shouldn't be allowed\");","  //           done();","  //       }).catch(done);","  //   }).catch(done);","  // });","","  // it(\"Should allow vote for member\", function(done) {","  //   var o = Organization.at(Organization.deployed_address);","  //   var p = {}","    ","  //   Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","  //     function(organization) {","  //       organization.addMember(member1)","  //       .then(","  //         function() {","  //           return organization.toTime(0)","  //       }).then(","  //         function() { ","  //           return organization.makeProposal('board election', 4, 10);","  //       }).then(","  //         function() { ","  //           return organization.toTime(7)","  //       }).then(","  //         function() { ","  //           return organization.proposals(0)","  //       }).then(","  //         function(proposalAddress) { ","  //           p = Proposal.at(proposalAddress)","  //           p.toTime(7)","  //           return organization.proposals(0)           ","  //       }).then(","  //         function(proposalAddress) { ","  //           p = Proposal.at(proposalAddress)","  //           return organization.vote(true, 1, proposalAddress, {from: member1})            ","  //       }).then(","  //         function() { ","  //           return p.forVotes.call()","  //       }).then(","  //         function(numVotes) {  ","  //           assert.equal(numVotes.toString(10), 1, \"Vote should be allowed\");","  //           done();","  //       }).catch(done);","  //   }).catch(done);","  // });","","  // it(\"Should allow weighted vote for member\", function(done) {","  //   var o = Organization.at(Organization.deployed_address);","  //   var p = {}","    ","  //   Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","  //     function(organization) {","  //       organization.addMember(member1)","  //       .then(","  //         function() {","  //           return organization.toTime(0)","  //       }).then(","  //         function() {  ","  //           return organization.makeProposal('board election',  4, 10);","  //       }).then(","  //         function() { ","  //           return organization.toTime(7)","  //       }).then(","  //         function() { ","  //           return organization.proposals(0)","  //       }).then(","  //         function(proposalAddress) { ","  //           p = Proposal.at(proposalAddress)","  //           p.toTime(7)","  //           return organization.proposals(0)           ","  //       }).then(","  //         function(proposalAddress) { ","  //           console.log(proposalAddress)","  //           p = Proposal.at(proposalAddress)","  //           return organization.vote(true, 3, proposalAddress, {from: member1})            ","  //       }).then(","  //         function() { ","  //           return organization.balances.call(member1)","  //       }).then(","  //         function(balance) { ","  //           assert.equal(balance, 91, \"Wrong balance after vote\")","  //           return p.bal.call()","  //       }).then(","  //         function(propbalance) { ","  //           assert.equal(propbalance.toString(10), 9, \"Wrong propbalance after vote\")","  //           return p.forVotes.call()","  //       }).then(","  //         function(numVotes) {  ","  //           assert.equal(numVotes, 3, \"Vote should be allowed\");","  //           done();","  //       }).catch(done);","  //   }).catch(done);","  // });","","","  it(\"Should allow weighted vote for member\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    var p = {}","    ","    Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","      function(organization) {","        organization.addMember(member1).then(","          function() {","            return organization.toTime(0)","        }).then(","          organization.addMember(member2)).then(","          function() { ","            return organization.makeProposal('board election', 4, 10);","        }).then(","          function() { ","            return organization.toTime(7)","        }).then(","          function() { ","            return organization.proposals(0)","        }).then(","          function(proposalAddress) { ","            console.log(proposalAddress)","            p = Proposal.at(proposalAddress)","            p.toTime(7)","            organization.vote(true, 3, proposalAddress, {from: member1}) ","            return proposalAddress         ","        }).then(","          function(proposalAddress) {","            return organization.vote(false, 2, proposalAddress, {from: member2})   ","        }).then(","          function() { ","            return organization.balances.call(member1)","        }).then(","          function(balance) { ","            assert.equal(balance, 91, \"Wrong balance after vote\")","            return organization.balances.call(member2)","        }).then(","          function(balance) { ","            assert.equal(balance, 96, \"Wrong balance after vote\")","            return p.bal.call()","        }).then(","          function(propbalance) { ","            assert.equal(propbalance, 13, \"Wrong propbalance after vote\")","            return p.forVotes.call()","        }).then(","          function(numVotes) {  ","            assert.equal(numVotes, 3, \"Vote should be allowed\");","            done();","        }).catch(done);","    }).catch(done);","  });","","it(\"Should get result and redistribute tokens\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    var p = {}","    var paddress = {}","    ","    Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","      function(organization) {","        organization.addMember(member1).then(","          function() {","            return organization.toTime(0)","        }).then(","          function() {","            return organization.addMember(member2)","        }).then(","          function() { ","            return organization.makeProposal('board election', 4, 10);","        }).then(","          function() { ","            return organization.toTime(7)","        }).then(","          function() { ","            return organization.proposals(0)","        }).then(","          function(proposalAddress) { ","            console.log(proposalAddress)","            paddress = proposalAddress","            p = Proposal.at(proposalAddress)","            p.toTime(7)","            organization.vote(true, 4, proposalAddress, {from: member1})          ","            organization.vote(false, 2, proposalAddress, {from: member2})            ","        }).then(","          function() {","            return organization.balances.call(member1)","        }).then(","          function(balance) { ","            assert.equal(balance, 84, \"Wrong balance after vote for member1\")","            return organization.balances.call(member2)","        }).then(","          function(balance) {","            assert.equal(balance, 96, \"Wrong balance after vote for member2\")","            organization.toTime(13)","            p.toTime(13)","            organization.getResult(paddress)","            return organization.propResults.call(paddress)","        }).then(","          function(result) {  ","            assert.equal(result, 1, \"Proposal should be adopted\");","            return p.bal.call()","        }).then(","          function() { ","            return organization.balances.call(member1)","          }).then(","          function(newbalance1) { ","            assert.equal(newbalance1.toString(10), 94, \"Wrong balance after vote for member2\")","            return organization.balances.call(member2)","          }).then(","          function(newbalance2) { ","            assert.equal(newbalance2, 106, \"Wrong balance after vote for member2\")","            done();","        }).catch(done);","    }).catch(done);","  });","});",""]}],[{"start":{"row":6,"column":0},"end":{"row":234,"column":8},"action":"remove","lines":["  // it(\"Initial organization settings should match\", function(done) {","","  //   var o = Organization.at(Organization.deployed_address);","    ","  //   Organization.new({from: organizer}).then(","  //     function(organization) {","  //       organization.token_count.call().then(","  //         function(count) { ","  //           assert.equal(count, 0, \"Count doesn't match!\"); ","  //       }).then(","  //         function() { ","  //           return organization.numMembers.call(); ","  //       }).then(","  //         function(num) { ","  //           assert.equal(num, 0, \"Members doesn't match!\");","  //           return organization.organizer.call();","  //       }).then(","  //         function(organizer) { ","  //           assert.equal(organizer, organizer, \"Organizer doesn't match!\");","  //           done();","  //       }).catch(done);","  //   }).catch(done);","  // });","","  // it(\"Should update token_count, numMembers and balance upon adding member\", function(done) {","  //   var o = Organization.at(Organization.deployed_address);","    ","  //   Organization.new({from: organizer}).then(","  //     function(organization) {","  //       organization.token_count.call().then(","  //         function(count) { ","  //           assert.equal(count, 0, \"Count doesn't match!\"); ","  //       }).then(","  //         function() { ","  //           return organization.addMember(member1);","  //       }).then(","  //         function() { ","  //           return organization.token_count.call()","  //       }).then(","  //         function(count) { ","  //           assert.equal(count, 100, \"New token_count is not correct!\");","  //           return organization.numMembers.call()","  //       }).then(","  //         function(num) { ","  //           assert.equal(num, 1, \"New numMembers is not correct!\");","  //           return organization.members.call(member1)","  //       }).then(","  //         function(isMember) { ","  //           assert.equal(isMember, true, \"Member 1 is not registered\");","  //           return organization.balances.call(member1)","  //       }).then(","  //         function(balance) { ","  //           assert.equal(balance, 100, \"Balance is wrong\");","  //           done()","  //       }).catch(done);","  //   }).catch(done);","  // });","","  // it(\"Should update token_count, numMembers and balance upon removing member\", function(done) {","  //   var o = Organization.at(Organization.deployed_address);","    ","  //   Organization.new({from: organizer}).then(","  //     function(organization) {","  //       organization.token_count.call().then(","  //         function(count) { ","  //           assert.equal(count, 0, \"Count doesn't match!\"); ","  //       }).then(","  //         function() { ","  //           return organization.addMember(member1);","  //       }).then(","  //         function() { ","  //           return organization.removeMember(member1);","  //       }).then(","  //         function() { ","  //           return organization.token_count.call()","  //       }).then(","  //         function(count) { ","  //           assert.equal(count, 0, \"New token_count is not correct!\");","  //           return organization.numMembers.call()","  //       }).then(","  //         function(num) { ","  //           assert.equal(num, 0, \"New numMembers is not correct!\");","  //           return organization.members.call(member1)","  //       }).then(","  //         function(isMember) { ","  //           assert.equal(isMember, false, \"Member 1 is not registered\");","  //           return organization.balances.call(member1)","  //       }).then(","  //         function(balance) { ","  //           assert.equal(balance, 0, \"Balance is wrong\");","  //           done()","  //       }).catch(done);","  //   }).catch(done);","  // });","","  // it(\"Should update proposal array when creating proposal\", function(done) {","  //   var o = Organization.at(Organization.deployed_address);","    ","  //   Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","  //     function(organization) {","  //       organization.makeProposal('board election', 14491063620 + 10, 14491063620 +12).then(","  //         function() { ","  //           return organization.numProposals.call();","  //       }).then(","  //         function(num) { ","  //           assert.equal(num, 1, \"New numProposal wrong\")","  //           return organization.proposals(0)","  //       }).then(","  //         function(proposalAddress) { ","  //           var proposal = Proposal.at(proposalAddress)","  //           return proposal.name.call()","  //       }).then(","  //         function(name) { ","  //           assert.equal(name, 'board election', \"Proposal name is wrong\");","  //           done();","  //       }).catch(done);","  //   }).catch(done);","  // });","","  // it(\"Should forbid vote for non-member\", function(done) {","  //   var o = Organization.at(Organization.deployed_address);","  //   var p = {}","    ","  //   Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","  //     function(organization) {","  //       organization.makeProposal('board election', 14491063620 + 10, 14491063620 +12).then(","  //         function() { ","  //           return organization.proposals(0);","  //       }).then(","  //         function(proposalAddress) { ","  //           p = Proposal.at(proposalAddress)","  //           return organization.vote(true, 1, proposalAddress, {from: member1})            ","  //       }).then(","  //         function() { ","  //           return p.forVotes.call()","  //       }).then(","  //         function(numVotes) {  ","  //           assert.equal(numVotes, 0, \"Vote shouldn't be allowed\");","  //           done();","  //       }).catch(done);","  //   }).catch(done);","  // });","","  // it(\"Should allow vote for member\", function(done) {","  //   var o = Organization.at(Organization.deployed_address);","  //   var p = {}","    ","  //   Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","  //     function(organization) {","  //       organization.addMember(member1)","  //       .then(","  //         function() {","  //           return organization.toTime(0)","  //       }).then(","  //         function() { ","  //           return organization.makeProposal('board election', 4, 10);","  //       }).then(","  //         function() { ","  //           return organization.toTime(7)","  //       }).then(","  //         function() { ","  //           return organization.proposals(0)","  //       }).then(","  //         function(proposalAddress) { ","  //           p = Proposal.at(proposalAddress)","  //           p.toTime(7)","  //           return organization.proposals(0)           ","  //       }).then(","  //         function(proposalAddress) { ","  //           p = Proposal.at(proposalAddress)","  //           return organization.vote(true, 1, proposalAddress, {from: member1})            ","  //       }).then(","  //         function() { ","  //           return p.forVotes.call()","  //       }).then(","  //         function(numVotes) {  ","  //           assert.equal(numVotes.toString(10), 1, \"Vote should be allowed\");","  //           done();","  //       }).catch(done);","  //   }).catch(done);","  // });","","  // it(\"Should allow weighted vote for member\", function(done) {","  //   var o = Organization.at(Organization.deployed_address);","  //   var p = {}","    ","  //   Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","  //     function(organization) {","  //       organization.addMember(member1)","  //       .then(","  //         function() {","  //           return organization.toTime(0)","  //       }).then(","  //         function() {  ","  //           return organization.makeProposal('board election',  4, 10);","  //       }).then(","  //         function() { ","  //           return organization.toTime(7)","  //       }).then(","  //         function() { ","  //           return organization.proposals(0)","  //       }).then(","  //         function(proposalAddress) { ","  //           p = Proposal.at(proposalAddress)","  //           p.toTime(7)","  //           return organization.proposals(0)           ","  //       }).then(","  //         function(proposalAddress) { ","  //           console.log(proposalAddress)","  //           p = Proposal.at(proposalAddress)","  //           return organization.vote(true, 3, proposalAddress, {from: member1})            ","  //       }).then(","  //         function() { ","  //           return organization.balances.call(member1)","  //       }).then(","  //         function(balance) { ","  //           assert.equal(balance, 91, \"Wrong balance after vote\")","  //           return p.bal.call()","  //       }).then(","  //         function(propbalance) { ","  //           assert.equal(propbalance.toString(10), 9, \"Wrong propbalance after vote\")","  //           return p.forVotes.call()","  //       }).then(","  //         function(numVotes) {  ","  //           assert.equal(numVotes, 3, \"Vote should be allowed\");","  //           done();","  //       }).catch(done);","  //   }).catch(done);","  // });"],"id":493,"ignore":true}],[{"start":{"row":0,"column":0},"end":{"row":124,"column":0},"action":"remove","lines":["contract('organization', function(accounts) {","  console.log(accounts);","  var organizer = accounts[0];","  var member1 = accounts[1];","  var member2 = accounts[2];","","","","","  it(\"Should allow weighted vote for member\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    var p = {}","    ","    Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","      function(organization) {","        organization.addMember(member1).then(","          function() {","            return organization.toTime(0)","        }).then(","          organization.addMember(member2)).then(","          function() { ","            return organization.makeProposal('board election', 4, 10);","        }).then(","          function() { ","            return organization.toTime(7)","        }).then(","          function() { ","            return organization.proposals(0)","        }).then(","          function(proposalAddress) { ","            console.log(proposalAddress)","            p = Proposal.at(proposalAddress)","            p.toTime(7)","            organization.vote(true, 3, proposalAddress, {from: member1}) ","            return proposalAddress         ","        }).then(","          function(proposalAddress) {","            return organization.vote(false, 2, proposalAddress, {from: member2})   ","        }).then(","          function() { ","            return organization.balances.call(member1)","        }).then(","          function(balance) { ","            assert.equal(balance, 91, \"Wrong balance after vote\")","            return organization.balances.call(member2)","        }).then(","          function(balance) { ","            assert.equal(balance, 96, \"Wrong balance after vote\")","            return p.bal.call()","        }).then(","          function(propbalance) { ","            assert.equal(propbalance, 13, \"Wrong propbalance after vote\")","            return p.forVotes.call()","        }).then(","          function(numVotes) {  ","            assert.equal(numVotes, 3, \"Vote should be allowed\");","            done();","        }).catch(done);","    }).catch(done);","  });","","it(\"Should get result and redistribute tokens\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    var p = {}","    var paddress = {}","    ","    Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","      function(organization) {","        organization.addMember(member1).then(","          function() {","            return organization.toTime(0)","        }).then(","          function() {","            return organization.addMember(member2)","        }).then(","          function() { ","            return organization.makeProposal('board election', 4, 10);","        }).then(","          function() { ","            return organization.toTime(7)","        }).then(","          function() { ","            return organization.proposals(0)","        }).then(","          function(proposalAddress) { ","            console.log(proposalAddress)","            paddress = proposalAddress","            p = Proposal.at(proposalAddress)","            p.toTime(7)","            organization.vote(true, 4, proposalAddress, {from: member1})          ","            organization.vote(false, 2, proposalAddress, {from: member2})            ","        }).then(","          function() {","            return organization.balances.call(member1)","        }).then(","          function(balance) { ","            assert.equal(balance, 84, \"Wrong balance after vote for member1\")","            return organization.balances.call(member2)","        }).then(","          function(balance) {","            assert.equal(balance, 96, \"Wrong balance after vote for member2\")","            organization.toTime(13)","            p.toTime(13)","            organization.getResult(paddress)","            return organization.propResults.call(paddress)","        }).then(","          function(result) {  ","            assert.equal(result, 1, \"Proposal should be adopted\");","            return p.bal.call()","        }).then(","          function() { ","            return organization.balances.call(member1)","          }).then(","          function(newbalance1) { ","            assert.equal(newbalance1.toString(10), 94, \"Wrong balance after vote for member2\")","            return organization.balances.call(member2)","          }).then(","          function(newbalance2) { ","            assert.equal(newbalance2, 106, \"Wrong balance after vote for member2\")","            done();","        }).catch(done);","    }).catch(done);","  });","});",""],"id":494,"ignore":true},{"start":{"row":0,"column":0},"end":{"row":352,"column":0},"action":"insert","lines":["contract('organization', function(accounts) {","  console.log(accounts);","  var organizer = accounts[0];","  var member1 = accounts[1];","  var member2 = accounts[2];","","  it(\"Initial organization settings should match\", function(done) {","","    var o = Organization.at(Organization.deployed_address);","    ","    Organization.new({from: organizer}).then(","      function(organization) {","        organization.token_count.call().then(","          function(count) { ","            assert.equal(count, 0, \"Count doesn't match!\"); ","        }).then(","          function() { ","            return organization.numMembers.call(); ","        }).then(","          function(num) { ","            assert.equal(num, 0, \"Members doesn't match!\");","            return organization.organizer.call();","        }).then(","          function(organizer) { ","            assert.equal(organizer, organizer, \"Organizer doesn't match!\");","            done();","        }).catch(done);","    }).catch(done);","  });","","  it(\"Should update token_count, numMembers and balance upon adding member\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    ","    Organization.new({from: organizer}).then(","      function(organization) {","        organization.token_count.call().then(","          function(count) { ","            assert.equal(count, 0, \"Count doesn't match!\"); ","        }).then(","          function() { ","            return organization.addMember(member1);","        }).then(","          function() { ","            return organization.token_count.call()","        }).then(","          function(count) { ","            assert.equal(count, 100, \"New token_count is not correct!\");","            return organization.numMembers.call()","        }).then(","          function(num) { ","            assert.equal(num, 1, \"New numMembers is not correct!\");","            return organization.members.call(member1)","        }).then(","          function(isMember) { ","            assert.equal(isMember, true, \"Member 1 is not registered\");","            return organization.balances.call(member1)","        }).then(","          function(balance) { ","            assert.equal(balance, 100, \"Balance is wrong\");","            done()","        }).catch(done);","    }).catch(done);","  });","","  it(\"Should update token_count, numMembers and balance upon removing member\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    ","    Organization.new({from: organizer}).then(","      function(organization) {","        organization.token_count.call().then(","          function(count) { ","            assert.equal(count, 0, \"Count doesn't match!\"); ","        }).then(","          function() { ","            return organization.addMember(member1);","        }).then(","          function() { ","            return organization.removeMember(member1);","        }).then(","          function() { ","            return organization.token_count.call()","        }).then(","          function(count) { ","            assert.equal(count, 0, \"New token_count is not correct!\");","            return organization.numMembers.call()","        }).then(","          function(num) { ","            assert.equal(num, 0, \"New numMembers is not correct!\");","            return organization.members.call(member1)","        }).then(","          function(isMember) { ","            assert.equal(isMember, false, \"Member 1 is not registered\");","            return organization.balances.call(member1)","        }).then(","          function(balance) { ","            assert.equal(balance, 0, \"Balance is wrong\");","            done()","        }).catch(done);","    }).catch(done);","  });","","  it(\"Should update proposal array when creating proposal\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    ","    Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","      function(organization) {","        organization.makeProposal('board election', 14491063620 + 10, 14491063620 +12).then(","          function() { ","            return organization.numProposals.call();","        }).then(","          function(num) { ","            assert.equal(num, 1, \"New numProposal wrong\")","            return organization.proposals(0)","        }).then(","          function(proposalAddress) { ","            var proposal = Proposal.at(proposalAddress)","            return proposal.name.call()","        }).then(","          function(name) { ","            assert.equal(name, 'board election', \"Proposal name is wrong\");","            done();","        }).catch(done);","    }).catch(done);","  });","","  it(\"Should forbid vote for non-member\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    var p = {}","    ","    Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","      function(organization) {","        organization.makeProposal('board election', 14491063620 + 10, 14491063620 +12).then(","          function() { ","            return organization.proposals(0);","        }).then(","          function(proposalAddress) { ","            p = Proposal.at(proposalAddress)","            return organization.vote(true, 1, proposalAddress, {from: member1})            ","        }).then(","          function() { ","            return p.forVotes.call()","        }).then(","          function(numVotes) {  ","            assert.equal(numVotes, 0, \"Vote shouldn't be allowed\");","            done();","        }).catch(done);","    }).catch(done);","  });","","  it(\"Should allow vote for member\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    var p = {}","    ","    Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","      function(organization) {","        organization.addMember(member1)","        .then(","          function() {","            return organization.toTime(0)","        }).then(","          function() { ","            return organization.makeProposal('board election', 4, 10);","        }).then(","          function() { ","            return organization.toTime(7)","        }).then(","          function() { ","            return organization.proposals(0)","        }).then(","          function(proposalAddress) { ","            p = Proposal.at(proposalAddress)","            p.toTime(7)","            return organization.proposals(0)           ","        }).then(","          function(proposalAddress) { ","            p = Proposal.at(proposalAddress)","            return organization.vote(true, 1, proposalAddress, {from: member1})            ","        }).then(","          function() { ","            return p.forVotes.call()","        }).then(","          function(numVotes) {  ","            assert.equal(numVotes.toString(10), 1, \"Vote should be allowed\");","            done();","        }).catch(done);","    }).catch(done);","  });","","  it(\"Should allow weighted vote for member\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    var p = {}","    ","    Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","      function(organization) {","        organization.addMember(member1)","        .then(","          function() {","            return organization.toTime(0)","        }).then(","          function() {  ","            return organization.makeProposal('board election',  4, 10);","        }).then(","          function() { ","            return organization.toTime(7)","        }).then(","          function() { ","            return organization.proposals(0)","        }).then(","          function(proposalAddress) { ","            p = Proposal.at(proposalAddress)","            p.toTime(7)","            return organization.proposals(0)           ","        }).then(","          function(proposalAddress) { ","            console.log(proposalAddress)","            p = Proposal.at(proposalAddress)","            return organization.vote(true, 3, proposalAddress, {from: member1})            ","        }).then(","          function() { ","            return organization.balances.call(member1)","        }).then(","          function(balance) { ","            assert.equal(balance, 91, \"Wrong balance after vote\")","            return p.bal.call()","        }).then(","          function(propbalance) { ","            assert.equal(propbalance.toString(10), 9, \"Wrong propbalance after vote\")","            return p.forVotes.call()","        }).then(","          function(numVotes) {  ","            assert.equal(numVotes, 3, \"Vote should be allowed\");","            done();","        }).catch(done);","    }).catch(done);","  });","","","  it(\"Should allow weighted vote for member\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    var p = {}","    ","    Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","      function(organization) {","        organization.addMember(member1).then(","          function() {","            return organization.toTime(0)","        }).then(","          organization.addMember(member2)).then(","          function() { ","            return organization.makeProposal('board election', 4, 10);","        }).then(","          function() { ","            return organization.toTime(7)","        }).then(","          function() { ","            return organization.proposals(0)","        }).then(","          function(proposalAddress) { ","            console.log(proposalAddress)","            p = Proposal.at(proposalAddress)","            p.toTime(7)","            organization.vote(true, 3, proposalAddress, {from: member1}) ","            return proposalAddress         ","        }).then(","          function(proposalAddress) {","            return organization.vote(false, 2, proposalAddress, {from: member2})   ","        }).then(","          function() { ","            return organization.balances.call(member1)","        }).then(","          function(balance) { ","            assert.equal(balance, 91, \"Wrong balance after vote\")","            return organization.balances.call(member2)","        }).then(","          function(balance) { ","            assert.equal(balance, 96, \"Wrong balance after vote\")","            return p.bal.call()","        }).then(","          function(propbalance) { ","            assert.equal(propbalance, 13, \"Wrong propbalance after vote\")","            return p.forVotes.call()","        }).then(","          function(numVotes) {  ","            assert.equal(numVotes, 3, \"Vote should be allowed\");","            done();","        }).catch(done);","    }).catch(done);","  });","","it(\"Should get result and redistribute tokens\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    var p = {}","    var paddress = {}","    ","    Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","      function(organization) {","        organization.addMember(member1).then(","          function() {","            return organization.toTime(0)","        }).then(","          function() {","            return organization.addMember(member2)","        }).then(","          function() { ","            return organization.makeProposal('board election', 4, 10);","        }).then(","          function() { ","            return organization.toTime(7)","        }).then(","          function() { ","            return organization.proposals(0)","        }).then(","          function(proposalAddress) { ","            console.log(proposalAddress)","            paddress = proposalAddress","            p = Proposal.at(proposalAddress)","            p.toTime(7)","            organization.vote(true, 4, proposalAddress, {from: member1})          ","            organization.vote(false, 2, proposalAddress, {from: member2})            ","        }).then(","          function() {","            return organization.balances.call(member1)","        }).then(","          function(balance) { ","            assert.equal(balance, 84, \"Wrong balance after vote for member1\")","            return organization.balances.call(member2)","        }).then(","          function(balance) {","            assert.equal(balance, 96, \"Wrong balance after vote for member2\")","            organization.toTime(13)","            p.toTime(13)","            organization.getResult(paddress)","            return organization.propResults.call(paddress)","        }).then(","          function(result) {  ","            assert.equal(result, 1, \"Proposal should be adopted\");","            return p.bal.call()","        }).then(","          function() { ","            return organization.balances.call(member1)","          }).then(","          function(newbalance1) { ","            assert.equal(newbalance1.toString(10), 94, \"Wrong balance after vote for member2\")","            return organization.balances.call(member2)","          }).then(","          function(newbalance2) { ","            assert.equal(newbalance2, 106, \"Wrong balance after vote for member2\")","            done();","        }).catch(done);","    }).catch(done);","  });","});",""]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":3,"column":24},"end":{"row":3,"column":24},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":33,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1449120238784,"hash":"009aced19f1541491c89529685c935455cdcebe3"}