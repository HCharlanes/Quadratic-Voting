{"changed":true,"filter":false,"title":"organization.js","tooltip":"/test/organization.js","value":"  contract('OrganizationsFactory', function(accounts) {\n    console.log(accounts);\n    var creator = accounts[0];\n    var member1 = accounts[1];\n    var member2 = accounts[2];\n  \n    it(\"Should let anyone create a Factory, as the factoryManager. And anyone create an organization\", function(done) {\n    \tvar org = {}\n    \tvar organizationAddr;\n    //  var o = Organizations.at(Organizations.deployed_address);\n      \n      OrganizationsFactory.new({from: creator}).then(\n        function (contract) {\n        contract.factoryManager.call()\n        .then(\n        \tfunction(createdBy) { \n            \tassert.equal(createdBy, creator, \"Owner address is wrong!\"); \n        }).then(\n        \tfunction(name) { \n            \tcontract.NewOrganization(\"ONU\", 100, 1000, {from: member1});\n            \treturn contract.organizationID.call()\n        }).then(\n\t    \tfunction(ID) { \n\t        \tassert.equal(ID, 1, \"organizationID has not incremented\");\n\t        \treturn contract.numOrganizations.call()\n\t    }).then(\n\t    \tfunction(NbOrg) { \n\t        \tassert.equal(NbOrg, 1, \"Adress of the organization not in organizations\");\n\t        \treturn contract.organizations.call(0);\n\t    }).then(\n\t    \tfunction(addr) { \n\t    \t\tconsole.log(addr);\n\t    \t\torganizationAddr = addr;\n\t    \t\torg = Organization.at(addr);\n\t        \treturn org.organizationOwner.call();\n\t    }).then(\n\t    \tfunction(organizationowner) { \n\t        \tassert.equal(organizationowner, member1, \"member1 is not the organizationowner\");\n\t        \tcontract.DeleteOrganization(organizationAddr);\n\t        \treturn contract.numOrganizations.call() \n\t    }).then(\n\t    \tfunction(numorg) { \n\t        \tassert.equal(numorg, 1, \"Num org should be 1, deletion should not have been completed\");\n\t          \tcontract.DeleteOrganization(organizationAddr, {from: member1});\n\t        \treturn contract.numOrganizations.call() \n\t    }).then(\n\t    \tfunction(numorg) { \n\t        \tassert.equal(numorg, 0, \"Numorg should be 0, deletion should have been completed\")\n            \tdone();\n        }).catch(done);\n      }).catch(done);\n    });\n});\n\ncontract('Organization', function(accounts) {\n    console.log(accounts);\n    var creator = accounts[0];\n    var member1 = accounts[1];\n    var member2 = accounts[2];\n    var organizationAddr;\n    var proposalAddress;\n    var org = {};\n    var p = {};\n\n    it(\"The creator of the organization should be able to add and remove member\", function(done) {\n      \n      OrganizationsFactory.new({from: creator}).then(\n        function (contract) {\n        \tcontract.NewOrganization(\"ONU\", 100, 1000, {from: member1})\n        .then(\n        \tfunction() { \n            \treturn contract.organizations.call(0);\n        }).then(\n        \tfunction(addr) { \n            \tconsole.log(addr);\n\t    \t\torganizationAddr = addr;\n\t    \t\torg = Organization.at(addr);\n\t        \treturn org.organizationOwner.call();\n        }).then(\n\t    \tfunction(organizationowner) { \n\t        \tassert.equal(organizationowner, member1, \"member1 is not the organizationowner\");\n\t        \torg.addMember(member2);\n\t        \treturn org.members.call(member2);\n\t    }).then(\n            function(member2registered) { \n\t        \tassert.equal(member2registered, false, \"member2 is registered, it should not be\");\n                org.addMember(member2, {from: member1});\n                return org.members.call(member2);\n\t    }).then(\n            function(member2registered) { \n\t        \tassert.equal(member2registered, true, \"member2 is not registered, it should be\");\n\t        \torg.removeMember(member2, {from: member1});\n                return org.members.call(member2);\n        }).then(\n            function(member2registered) { \n\t        \tassert.equal(member2registered, false, \"member2 is  registered, it should have been removed\");\n              done()\n        }).catch(done);\n    }).catch(done);\n  });\n  \n  it(\"Should let two members vote and getresult within proposal\", function(done) {\n      \n      OrganizationsFactory.new({from: creator}).then(\n        function (contract) {\n        \tcontract.NewOrganization(\"ONU\", 100, 1000, {from: member1})\n        .then(\n        \tfunction() { \n            \treturn contract.organizations.call(0);\n        }).then(\n        \tfunction(addr) { \n            \tconsole.log(addr);\n\t    \t\torganizationAddr = addr;\n\t    \t\torg = Organization.at(addr);\n\t    \t\tconsole.log(0);\n\t        \torg.addMember(member1, {from: member1});\n                org.addMember(member2, {from: member1});\n                console.log(1);\n                org.makeProposal(\"yolo\", \"this is yolo\", 2000, 3000, {from: member1});\n                console.log(2);\n            \treturn org.proposalID.call();\n        }).then(\n            function(address) { \n            \tconsole.log(3);\n            \tconsole.log(address);\n            \treturn org.proposals.call(address);\n        }).then(\n        \tfunction(address) {\n        \t\tconsole.log(address);\n            \tp = Proposal.at(address);\n            \tproposalAddress = address;\n            \tconsole.log(4);\n            \torg.vote(false, 2, proposalAddress, {from: member1});\n            \torg.vote(true, 1, proposalAddress, {from: member2});\n            \treturn p.nbVoters.call();\n        }).then(\n            function(nbvo) { \n\t     \t\tassert.equal(nbvo.toString(), 2, \"there are not 2 nbVoters\");\t        \t\n         \t\treturn p.forVotes.call();\n        }).then(\n            function(bla) { \n\t     \t\tassert.equal(bla, 1, \"there are not 2 nbVoters\");\t        \t\n              \treturn p.againstVotes.call()\n        }).then(\n            function(count) { \n              assert.equal(count.toString(), 2, \"New token_count is not correct!\");\n              p.Results();\n             return p.result.call()\n        }).then(\n            function(num) { \n              assert.equal(num.toString(), 0, \"The result is not 0\");\n              done()\n        }).catch(done);\n    }).catch(done);\n  });\n\nit(\"Should let two members vote and getresult within proposal\", function(done) {\n      \n      OrganizationsFactory.new({from: creator}).then(\n        function (contract) {\n        \tcontract.NewOrganization(\"ONU\", 100, 1000, {from: member1})\n        .then(\n        \tfunction() { \n            \treturn contract.organizations.call(0);\n        }).then(\n        \tfunction(addr) { \n            \tconsole.log(addr);\n\t    \t\torganizationAddr = addr;\n\t    \t\torg = Organization.at(addr);\n\t    \t\tconsole.log(0);\n\t        \torg.addMember(member1, {from: member1});\n                org.addMember(member2, {from: member1});\n                console.log(1);\n                org.makeProposal(\"yolo\", \"this is yolo\", 2000, 3000, {from: member1});\n                console.log(2);\n            \treturn org.proposalID.call();\n        }).then(\n            function(address) { \n            \tconsole.log(3);\n            \tconsole.log(address);\n            \treturn org.proposals.call(address);\n        }).then(\n        \tfunction(address) {\n        \t\tconsole.log(address);\n            \tp = Proposal.at(address);\n            \tproposalAddress = address;\n            \tconsole.log(4);\n            \torg.vote(false, 2, proposalAddress, {from: member1});\n            \torg.vote(true, 1, proposalAddress, {from: member2});\n            \torg.getResult(proposalAddress);\n            \treturn org.propResults.call(proposalAddress)\n        }).then(\n            function(count) { \n              assert.equal(count.toString(), 0, \"The result should be 0 = vote rejected\");\n              return org.balances.call(member1);\n        }).then(\n            function(address) { \n              assert.equal(address.toString(), 98, \"New token_count is not correct!\");\n              return org.balances.call(member2);\n        }).then(\n        \tfunction(caca) {\n        \t\tassert.equal(caca.toString(), 101);\n              done()\n        }).catch(done);\n    }).catch(done);\n  });\n\n });\n","undoManager":{"mark":99,"position":100,"stack":[[{"start":{"row":223,"column":23},"end":{"row":223,"column":24},"action":"insert","lines":["t"],"id":420}],[{"start":{"row":223,"column":24},"end":{"row":223,"column":25},"action":"insert","lines":["e"],"id":421}],[{"start":{"row":223,"column":25},"end":{"row":223,"column":26},"action":"insert","lines":[" "],"id":422}],[{"start":{"row":223,"column":26},"end":{"row":223,"column":27},"action":"insert","lines":["t"],"id":423}],[{"start":{"row":223,"column":27},"end":{"row":223,"column":28},"action":"insert","lines":["o"],"id":424}],[{"start":{"row":223,"column":28},"end":{"row":223,"column":29},"action":"insert","lines":["k"],"id":425}],[{"start":{"row":223,"column":29},"end":{"row":223,"column":30},"action":"insert","lines":["e"],"id":426}],[{"start":{"row":223,"column":30},"end":{"row":223,"column":31},"action":"insert","lines":["n"],"id":427}],[{"start":{"row":223,"column":31},"end":{"row":223,"column":32},"action":"insert","lines":[" "],"id":428}],[{"start":{"row":223,"column":32},"end":{"row":223,"column":33},"action":"insert","lines":["a"],"id":429}],[{"start":{"row":223,"column":33},"end":{"row":223,"column":34},"action":"insert","lines":["f"],"id":430}],[{"start":{"row":223,"column":34},"end":{"row":223,"column":35},"action":"insert","lines":["t"],"id":431}],[{"start":{"row":223,"column":34},"end":{"row":223,"column":35},"action":"remove","lines":["t"],"id":432}],[{"start":{"row":223,"column":33},"end":{"row":223,"column":34},"action":"remove","lines":["f"],"id":433}],[{"start":{"row":223,"column":32},"end":{"row":223,"column":33},"action":"remove","lines":["a"],"id":434}],[{"start":{"row":223,"column":31},"end":{"row":223,"column":32},"action":"remove","lines":[" "],"id":435}],[{"start":{"row":223,"column":30},"end":{"row":223,"column":31},"action":"remove","lines":["n"],"id":436}],[{"start":{"row":223,"column":29},"end":{"row":223,"column":30},"action":"remove","lines":["e"],"id":437}],[{"start":{"row":223,"column":28},"end":{"row":223,"column":29},"action":"remove","lines":["k"],"id":438}],[{"start":{"row":223,"column":27},"end":{"row":223,"column":28},"action":"remove","lines":["o"],"id":439}],[{"start":{"row":223,"column":26},"end":{"row":223,"column":27},"action":"remove","lines":["t"],"id":440}],[{"start":{"row":223,"column":25},"end":{"row":223,"column":26},"action":"remove","lines":[" "],"id":441}],[{"start":{"row":223,"column":24},"end":{"row":223,"column":25},"action":"remove","lines":["e"],"id":442}],[{"start":{"row":223,"column":23},"end":{"row":223,"column":24},"action":"remove","lines":["t"],"id":443}],[{"start":{"row":223,"column":22},"end":{"row":223,"column":23},"action":"remove","lines":["u"],"id":444}],[{"start":{"row":223,"column":21},"end":{"row":223,"column":22},"action":"remove","lines":["b"],"id":445}],[{"start":{"row":223,"column":20},"end":{"row":223,"column":21},"action":"remove","lines":["i"],"id":446}],[{"start":{"row":223,"column":19},"end":{"row":223,"column":20},"action":"remove","lines":["r"],"id":447}],[{"start":{"row":223,"column":18},"end":{"row":223,"column":19},"action":"remove","lines":["t"],"id":448}],[{"start":{"row":223,"column":17},"end":{"row":223,"column":18},"action":"remove","lines":["s"],"id":449}],[{"start":{"row":223,"column":16},"end":{"row":223,"column":17},"action":"remove","lines":["i"],"id":450}],[{"start":{"row":223,"column":15},"end":{"row":223,"column":16},"action":"remove","lines":["d"],"id":451}],[{"start":{"row":223,"column":14},"end":{"row":223,"column":15},"action":"remove","lines":["e"],"id":452}],[{"start":{"row":223,"column":13},"end":{"row":223,"column":14},"action":"remove","lines":["r"],"id":453}],[{"start":{"row":223,"column":13},"end":{"row":223,"column":14},"action":"insert","lines":["g"],"id":454}],[{"start":{"row":223,"column":14},"end":{"row":223,"column":15},"action":"insert","lines":["e"],"id":455}],[{"start":{"row":223,"column":15},"end":{"row":223,"column":16},"action":"insert","lines":["t"],"id":456}],[{"start":{"row":223,"column":16},"end":{"row":223,"column":17},"action":"insert","lines":[" "],"id":457}],[{"start":{"row":223,"column":17},"end":{"row":223,"column":18},"action":"insert","lines":["r"],"id":458}],[{"start":{"row":223,"column":18},"end":{"row":223,"column":19},"action":"insert","lines":["e"],"id":459}],[{"start":{"row":223,"column":19},"end":{"row":223,"column":20},"action":"insert","lines":["s"],"id":460}],[{"start":{"row":223,"column":20},"end":{"row":223,"column":21},"action":"insert","lines":["u"],"id":461}],[{"start":{"row":223,"column":21},"end":{"row":223,"column":22},"action":"insert","lines":["l"],"id":462}],[{"start":{"row":223,"column":22},"end":{"row":223,"column":23},"action":"insert","lines":["t"],"id":463}],[{"start":{"row":223,"column":23},"end":{"row":223,"column":24},"action":"insert","lines":[" "],"id":464}],[{"start":{"row":223,"column":24},"end":{"row":223,"column":25},"action":"insert","lines":["a"],"id":465}],[{"start":{"row":223,"column":25},"end":{"row":223,"column":26},"action":"insert","lines":["n"],"id":466}],[{"start":{"row":223,"column":26},"end":{"row":223,"column":27},"action":"insert","lines":["d"],"id":467}],[{"start":{"row":223,"column":27},"end":{"row":223,"column":28},"action":"insert","lines":[" "],"id":468}],[{"start":{"row":223,"column":28},"end":{"row":223,"column":29},"action":"insert","lines":["r"],"id":469}],[{"start":{"row":223,"column":29},"end":{"row":223,"column":30},"action":"insert","lines":["e"],"id":470}],[{"start":{"row":223,"column":30},"end":{"row":223,"column":31},"action":"insert","lines":["d"],"id":471}],[{"start":{"row":223,"column":31},"end":{"row":223,"column":32},"action":"insert","lines":["i"],"id":472}],[{"start":{"row":223,"column":32},"end":{"row":223,"column":33},"action":"insert","lines":["s"],"id":473}],[{"start":{"row":223,"column":33},"end":{"row":223,"column":34},"action":"insert","lines":["t"],"id":474}],[{"start":{"row":223,"column":34},"end":{"row":223,"column":35},"action":"insert","lines":["r"],"id":475}],[{"start":{"row":223,"column":35},"end":{"row":223,"column":36},"action":"insert","lines":["i"],"id":476}],[{"start":{"row":223,"column":36},"end":{"row":223,"column":37},"action":"insert","lines":["b"],"id":477}],[{"start":{"row":223,"column":37},"end":{"row":223,"column":38},"action":"insert","lines":["u"],"id":478}],[{"start":{"row":223,"column":38},"end":{"row":223,"column":39},"action":"insert","lines":["t"],"id":479}],[{"start":{"row":223,"column":39},"end":{"row":223,"column":40},"action":"insert","lines":["e"],"id":480}],[{"start":{"row":223,"column":40},"end":{"row":223,"column":41},"action":"insert","lines":[" "],"id":481}],[{"start":{"row":223,"column":41},"end":{"row":223,"column":42},"action":"insert","lines":["t"],"id":482}],[{"start":{"row":223,"column":42},"end":{"row":223,"column":43},"action":"insert","lines":["o"],"id":483}],[{"start":{"row":223,"column":43},"end":{"row":223,"column":44},"action":"insert","lines":["k"],"id":484}],[{"start":{"row":223,"column":44},"end":{"row":223,"column":45},"action":"insert","lines":["e"],"id":485}],[{"start":{"row":223,"column":45},"end":{"row":223,"column":46},"action":"insert","lines":["n"],"id":486}],[{"start":{"row":223,"column":46},"end":{"row":223,"column":47},"action":"insert","lines":["s"],"id":487}],[{"start":{"row":214,"column":16},"end":{"row":345,"column":10},"action":"insert","linesid":488,"ignore":true}],[{"start":{"row":304,"column":10},"end":{"row":345,"column":10},"action":"remove","linesid":489,"ignore":true}],[{"start":{"row":214,"column":16},"end":{"row":304,"column":10},"action":"remove","linesid":490,"ignore":true},{"start":{"row":223,"column":0},"end":{"row":223,"column":2},"action":"remove","lines":["  "]},{"start":{"row":223,"column":0},"end":{"row":223,"column":2},"action":"insert","lines":["  "]}],[{"start":{"row":223,"column":0},"end":{"row":223,"column":2},"action":"remove","lines":["  "],"id":491,"ignore":true},{"start":{"row":223,"column":0},"end":{"row":223,"column":2},"action":"insert","lines":["  "]}],[{"start":{"row":0,"column":0},"end":{"row":272,"column":0},"action":"remove","lines":["contract('organization', function(accounts) {","\tconsole.log(accounts);","\tvar organizer = accounts[0];","  var member1 = accounts[1];","  var member2 = accounts[2];","","  it(\"Initial organization settings should match\", function(done) {","","    var o = Organization.at(Organization.deployed_address);","  \t","  \tOrganization.new({from: organizer}).then(","  \t\tfunction(organization) {","  \t\t\torganization.token_count.call().then(","  \t\t\t\tfunction(count) { ","  \t\t\t\t\tassert.equal(count, 0, \"Count doesn't match!\"); ","  \t\t\t}).then(","  \t\t\t\tfunction() { ","  \t\t\t\t\treturn organization.numMembers.call(); ","  \t\t\t}).then(","  \t\t\t\tfunction(num) { ","  \t\t\t\t\tassert.equal(num, 0, \"Members doesn't match!\");","  \t\t\t\t\treturn organization.organizer.call();","  \t\t\t}).then(","  \t\t\t\tfunction(organizer) { ","  \t\t\t\t\tassert.equal(organizer, organizer, \"Organizer doesn't match!\");","  \t\t\t\t\tdone();","  \t\t\t}).catch(done);","  \t}).catch(done);","  });","","  it(\"Should update token_count, numMembers and balance upon adding member\", function(done) {","    var o = Organization.at(Organization.deployed_address);","  \t","  \tOrganization.new({from: organizer}).then(","  \t\tfunction(organization) {","  \t\t\torganization.token_count.call().then(","  \t\t\t\tfunction(count) { ","  \t\t\t\t\tassert.equal(count, 0, \"Count doesn't match!\"); ","  \t\t\t}).then(","  \t\t\t\tfunction() { ","  \t\t\t\t\treturn organization.addMember(member1);","  \t\t\t}).then(","  \t\t\t\tfunction() { ","  \t\t\t\t\treturn organization.token_count.call()","  \t\t\t}).then(","          function(count) { ","            assert.equal(count, 100, \"New token_count is not correct!\");","            return organization.numMembers.call()","        }).then(","          function(num) { ","            assert.equal(num, 1, \"New numMembers is not correct!\");","            return organization.members.call(member1)","        }).then(","          function(isMember) { ","            assert.equal(isMember, true, \"Member 1 is not registered\");","            return organization.balances.call(member1)","        }).then(","          function(balance) { ","            assert.equal(balance, 100, \"Balance is wrong\");","            done()","        }).catch(done);","  \t}).catch(done);","  });","","  it(\"Should update token_count, numMembers and balance upon removing member\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    ","    Organization.new({from: organizer}).then(","      function(organization) {","        organization.token_count.call().then(","          function(count) { ","            assert.equal(count, 0, \"Count doesn't match!\"); ","        }).then(","          function() { ","            return organization.addMember(member1);","        }).then(","          function() { ","            return organization.removeMember(member1);","        }).then(","          function() { ","            return organization.token_count.call()","        }).then(","          function(count) { ","            assert.equal(count, 0, \"New token_count is not correct!\");","            return organization.numMembers.call()","        }).then(","          function(num) { ","            assert.equal(num, 0, \"New numMembers is not correct!\");","            return organization.members.call(member1)","        }).then(","          function(isMember) { ","            assert.equal(isMember, false, \"Member 1 is not registered\");","            return organization.balances.call(member1)","        }).then(","          function(balance) { ","            assert.equal(balance, 0, \"Balance is wrong\");","            done()","        }).catch(done);","    }).catch(done);","  });","","  it(\"Should update proposal array when creating proposal\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    ","    Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","      function(organization) {","        organization.token_count.call().then(","          function(count) { ","            assert.equal(count, 0, \"Count doesn't match!\"); ","        }).then(","          function() { ","            return organization.makeProposal('board election');","        }).then(","          function() { ","            return organization.numProposals.call();","        }).then(","          function(num) { ","            assert.equal(num, 1, \"New numProposal wrong\")","            return organization.proposals(0)","        }).then(","          function(proposalAddress) { ","            var proposal = Proposal.at(proposalAddress)","            return proposal.name.call()","        }).then(","          function(name) { ","            assert.equal(name, 'board election', \"Proposal name is wrong\");","            done();","        }).catch(done);","    }).catch(done);","  });","","  it(\"Should forbid vote for non-member\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    var p = {}","    ","    Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","      function(organization) {","            organization.makeProposal('board election').then(","          function() { ","            return organization.proposals(0)","        }).then(","          function(proposalAddress) { ","            p = Proposal.at(proposalAddress)","            return organization.vote(true, 1, proposalAddress, {from: member1})            ","        }).then(","          function() { ","            console.log(\"4\")","","            return p.forVotes.call()","        }).then(","          function(numVotes) {  ","                                    console.log(\"5\")","","            assert.equal(numVotes, 0, \"Vote shouldn't be allowed\");","            done();","        }).catch(done);","    }).catch(done);","  });","","  it(\"Should allow vote for member\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    var p = {}","    ","    Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","      function(organization) {","        organization.addMember(member1).then(","          function() { ","            return organization.makeProposal('board election');","        }).then(","          function() { ","            return organization.proposals(0)","        }).then(","          function(proposalAddress) { ","            p = Proposal.at(proposalAddress)","            return organization.vote(true, 1, proposalAddress, {from: member1})            ","        }).then(","          function() { ","            return p.forVotes.call()","        }).then(","          function(numVotes) {  ","            assert.equal(numVotes, 1, \"Vote should be allowed\");","            done();","        }).catch(done);","    }).catch(done);","  });","","  it(\"Should allow weighted vote for member\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    var p = {}","    ","    Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","      function(organization) {","        organization.addMember(member1).then(","          function() { ","            return organization.makeProposal('board election');","        }).then(","          function() { ","            return organization.proposals(0)","        }).then(","          function(proposalAddress) { ","            console.log(proposalAddress)","            p = Proposal.at(proposalAddress)","            return organization.vote(true, 3, proposalAddress, {from: member1})            ","        }).then(","          function() { ","            return organization.balances.call(member1)","        }).then(","          function(balance) { ","            assert.equal(balance, 91, \"Wrong balance after vote\")","            return p.balance.call()","        }).then(","          function(propbalance) { ","            assert.equal(propbalance, 9, \"Wrong propbalance after vote\")","            return p.forVotes.call()","        }).then(","          function(numVotes) {  ","            assert.equal(numVotes, 3, \"Vote should be allowed\");","            done();","        }).catch(done);","    }).catch(done);","  });","","","  it(\"Should get result and redistribute tokens\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    var p = {}","    ","    Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","      function(organization) {","        organization.addMember(member1).then(","          organization.addMember(member2)).then(","          function() { ","            return organization.makeProposal('board election');","        }).then(","          function() { ","            return organization.proposals(0)","        }).then(","          function(proposalAddress) { ","            console.log(proposalAddress)","            p = Proposal.at(proposalAddress)","            organization.vote(true, 4, proposalAddress, {from: member1})          ","            organization.vote(false, 2, proposalAddress, {from: member2})            ","        }).then(","          function() { ","            return organization.balances.call(member1)","        }).then(","          function(balance) { ","            assert.equal(balance, 84, \"Wrong balance after vote for member1\")","            return organization.balances.call(member2)","        }).then(","          function(balance) { ","            assert.equal(balance, 96, \"Wrong balance after vote for member2\")","            organization.getResult()","            return organization.propResults.call(proposalAddress)","        }).then(","          function(result) {  ","            assert.equal(result, 1, \"Proposal should be adopted\");","          }).then(","          function(dispatch) { ","            return organization.balances.call(member1)","          }).then(","          function(newbalance1) { ","            assert.equal(newbalance1, 94, \"Wrong balance after vote for member2\")","            return organization.balances.call(member2)","          }).then(","          function(newbalance2) { ","            assert.equal(newbalance2, 106, \"Wrong balance after vote for member2\")","            done();","        }).catch(done);","    }).catch(done);","  });","});",""],"id":492,"ignore":true},{"start":{"row":0,"column":0},"end":{"row":352,"column":0},"action":"insert","lines":["contract('organization', function(accounts) {","  console.log(accounts);","  var organizer = accounts[0];","  var member1 = accounts[1];","  var member2 = accounts[2];","","  // it(\"Initial organization settings should match\", function(done) {","","  //   var o = Organization.at(Organization.deployed_address);","    ","  //   Organization.new({from: organizer}).then(","  //     function(organization) {","  //       organization.token_count.call().then(","  //         function(count) { ","  //           assert.equal(count, 0, \"Count doesn't match!\"); ","  //       }).then(","  //         function() { ","  //           return organization.numMembers.call(); ","  //       }).then(","  //         function(num) { ","  //           assert.equal(num, 0, \"Members doesn't match!\");","  //           return organization.organizer.call();","  //       }).then(","  //         function(organizer) { ","  //           assert.equal(organizer, organizer, \"Organizer doesn't match!\");","  //           done();","  //       }).catch(done);","  //   }).catch(done);","  // });","","  // it(\"Should update token_count, numMembers and balance upon adding member\", function(done) {","  //   var o = Organization.at(Organization.deployed_address);","    ","  //   Organization.new({from: organizer}).then(","  //     function(organization) {","  //       organization.token_count.call().then(","  //         function(count) { ","  //           assert.equal(count, 0, \"Count doesn't match!\"); ","  //       }).then(","  //         function() { ","  //           return organization.addMember(member1);","  //       }).then(","  //         function() { ","  //           return organization.token_count.call()","  //       }).then(","  //         function(count) { ","  //           assert.equal(count, 100, \"New token_count is not correct!\");","  //           return organization.numMembers.call()","  //       }).then(","  //         function(num) { ","  //           assert.equal(num, 1, \"New numMembers is not correct!\");","  //           return organization.members.call(member1)","  //       }).then(","  //         function(isMember) { ","  //           assert.equal(isMember, true, \"Member 1 is not registered\");","  //           return organization.balances.call(member1)","  //       }).then(","  //         function(balance) { ","  //           assert.equal(balance, 100, \"Balance is wrong\");","  //           done()","  //       }).catch(done);","  //   }).catch(done);","  // });","","  // it(\"Should update token_count, numMembers and balance upon removing member\", function(done) {","  //   var o = Organization.at(Organization.deployed_address);","    ","  //   Organization.new({from: organizer}).then(","  //     function(organization) {","  //       organization.token_count.call().then(","  //         function(count) { ","  //           assert.equal(count, 0, \"Count doesn't match!\"); ","  //       }).then(","  //         function() { ","  //           return organization.addMember(member1);","  //       }).then(","  //         function() { ","  //           return organization.removeMember(member1);","  //       }).then(","  //         function() { ","  //           return organization.token_count.call()","  //       }).then(","  //         function(count) { ","  //           assert.equal(count, 0, \"New token_count is not correct!\");","  //           return organization.numMembers.call()","  //       }).then(","  //         function(num) { ","  //           assert.equal(num, 0, \"New numMembers is not correct!\");","  //           return organization.members.call(member1)","  //       }).then(","  //         function(isMember) { ","  //           assert.equal(isMember, false, \"Member 1 is not registered\");","  //           return organization.balances.call(member1)","  //       }).then(","  //         function(balance) { ","  //           assert.equal(balance, 0, \"Balance is wrong\");","  //           done()","  //       }).catch(done);","  //   }).catch(done);","  // });","","  // it(\"Should update proposal array when creating proposal\", function(done) {","  //   var o = Organization.at(Organization.deployed_address);","    ","  //   Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","  //     function(organization) {","  //       organization.makeProposal('board election', 14491063620 + 10, 14491063620 +12).then(","  //         function() { ","  //           return organization.numProposals.call();","  //       }).then(","  //         function(num) { ","  //           assert.equal(num, 1, \"New numProposal wrong\")","  //           return organization.proposals(0)","  //       }).then(","  //         function(proposalAddress) { ","  //           var proposal = Proposal.at(proposalAddress)","  //           return proposal.name.call()","  //       }).then(","  //         function(name) { ","  //           assert.equal(name, 'board election', \"Proposal name is wrong\");","  //           done();","  //       }).catch(done);","  //   }).catch(done);","  // });","","  // it(\"Should forbid vote for non-member\", function(done) {","  //   var o = Organization.at(Organization.deployed_address);","  //   var p = {}","    ","  //   Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","  //     function(organization) {","  //       organization.makeProposal('board election', 14491063620 + 10, 14491063620 +12).then(","  //         function() { ","  //           return organization.proposals(0);","  //       }).then(","  //         function(proposalAddress) { ","  //           p = Proposal.at(proposalAddress)","  //           return organization.vote(true, 1, proposalAddress, {from: member1})            ","  //       }).then(","  //         function() { ","  //           return p.forVotes.call()","  //       }).then(","  //         function(numVotes) {  ","  //           assert.equal(numVotes, 0, \"Vote shouldn't be allowed\");","  //           done();","  //       }).catch(done);","  //   }).catch(done);","  // });","","  // it(\"Should allow vote for member\", function(done) {","  //   var o = Organization.at(Organization.deployed_address);","  //   var p = {}","    ","  //   Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","  //     function(organization) {","  //       organization.addMember(member1)","  //       .then(","  //         function() {","  //           return organization.toTime(0)","  //       }).then(","  //         function() { ","  //           return organization.makeProposal('board election', 4, 10);","  //       }).then(","  //         function() { ","  //           return organization.toTime(7)","  //       }).then(","  //         function() { ","  //           return organization.proposals(0)","  //       }).then(","  //         function(proposalAddress) { ","  //           p = Proposal.at(proposalAddress)","  //           p.toTime(7)","  //           return organization.proposals(0)           ","  //       }).then(","  //         function(proposalAddress) { ","  //           p = Proposal.at(proposalAddress)","  //           return organization.vote(true, 1, proposalAddress, {from: member1})            ","  //       }).then(","  //         function() { ","  //           return p.forVotes.call()","  //       }).then(","  //         function(numVotes) {  ","  //           assert.equal(numVotes.toString(10), 1, \"Vote should be allowed\");","  //           done();","  //       }).catch(done);","  //   }).catch(done);","  // });","","  // it(\"Should allow weighted vote for member\", function(done) {","  //   var o = Organization.at(Organization.deployed_address);","  //   var p = {}","    ","  //   Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","  //     function(organization) {","  //       organization.addMember(member1)","  //       .then(","  //         function() {","  //           return organization.toTime(0)","  //       }).then(","  //         function() {  ","  //           return organization.makeProposal('board election',  4, 10);","  //       }).then(","  //         function() { ","  //           return organization.toTime(7)","  //       }).then(","  //         function() { ","  //           return organization.proposals(0)","  //       }).then(","  //         function(proposalAddress) { ","  //           p = Proposal.at(proposalAddress)","  //           p.toTime(7)","  //           return organization.proposals(0)           ","  //       }).then(","  //         function(proposalAddress) { ","  //           console.log(proposalAddress)","  //           p = Proposal.at(proposalAddress)","  //           return organization.vote(true, 3, proposalAddress, {from: member1})            ","  //       }).then(","  //         function() { ","  //           return organization.balances.call(member1)","  //       }).then(","  //         function(balance) { ","  //           assert.equal(balance, 91, \"Wrong balance after vote\")","  //           return p.bal.call()","  //       }).then(","  //         function(propbalance) { ","  //           assert.equal(propbalance.toString(10), 9, \"Wrong propbalance after vote\")","  //           return p.forVotes.call()","  //       }).then(","  //         function(numVotes) {  ","  //           assert.equal(numVotes, 3, \"Vote should be allowed\");","  //           done();","  //       }).catch(done);","  //   }).catch(done);","  // });","","","  it(\"Should allow weighted vote for member\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    var p = {}","    ","    Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","      function(organization) {","        organization.addMember(member1).then(","          function() {","            return organization.toTime(0)","        }).then(","          organization.addMember(member2)).then(","          function() { ","            return organization.makeProposal('board election', 4, 10);","        }).then(","          function() { ","            return organization.toTime(7)","        }).then(","          function() { ","            return organization.proposals(0)","        }).then(","          function(proposalAddress) { ","            console.log(proposalAddress)","            p = Proposal.at(proposalAddress)","            p.toTime(7)","            organization.vote(true, 3, proposalAddress, {from: member1}) ","            return proposalAddress         ","        }).then(","          function(proposalAddress) {","            return organization.vote(false, 2, proposalAddress, {from: member2})   ","        }).then(","          function() { ","            return organization.balances.call(member1)","        }).then(","          function(balance) { ","            assert.equal(balance, 91, \"Wrong balance after vote\")","            return organization.balances.call(member2)","        }).then(","          function(balance) { ","            assert.equal(balance, 96, \"Wrong balance after vote\")","            return p.bal.call()","        }).then(","          function(propbalance) { ","            assert.equal(propbalance, 13, \"Wrong propbalance after vote\")","            return p.forVotes.call()","        }).then(","          function(numVotes) {  ","            assert.equal(numVotes, 3, \"Vote should be allowed\");","            done();","        }).catch(done);","    }).catch(done);","  });","","it(\"Should get result and redistribute tokens\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    var p = {}","    var paddress = {}","    ","    Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","      function(organization) {","        organization.addMember(member1).then(","          function() {","            return organization.toTime(0)","        }).then(","          function() {","            return organization.addMember(member2)","        }).then(","          function() { ","            return organization.makeProposal('board election', 4, 10);","        }).then(","          function() { ","            return organization.toTime(7)","        }).then(","          function() { ","            return organization.proposals(0)","        }).then(","          function(proposalAddress) { ","            console.log(proposalAddress)","            paddress = proposalAddress","            p = Proposal.at(proposalAddress)","            p.toTime(7)","            organization.vote(true, 4, proposalAddress, {from: member1})          ","            organization.vote(false, 2, proposalAddress, {from: member2})            ","        }).then(","          function() {","            return organization.balances.call(member1)","        }).then(","          function(balance) { ","            assert.equal(balance, 84, \"Wrong balance after vote for member1\")","            return organization.balances.call(member2)","        }).then(","          function(balance) {","            assert.equal(balance, 96, \"Wrong balance after vote for member2\")","            organization.toTime(13)","            p.toTime(13)","            organization.getResult(paddress)","            return organization.propResults.call(paddress)","        }).then(","          function(result) {  ","            assert.equal(result, 1, \"Proposal should be adopted\");","            return p.bal.call()","        }).then(","          function() { ","            return organization.balances.call(member1)","          }).then(","          function(newbalance1) { ","            assert.equal(newbalance1.toString(10), 94, \"Wrong balance after vote for member2\")","            return organization.balances.call(member2)","          }).then(","          function(newbalance2) { ","            assert.equal(newbalance2, 106, \"Wrong balance after vote for member2\")","            done();","        }).catch(done);","    }).catch(done);","  });","});",""]}],[{"start":{"row":6,"column":0},"end":{"row":234,"column":8},"action":"remove","lines":["  // it(\"Initial organization settings should match\", function(done) {","","  //   var o = Organization.at(Organization.deployed_address);","    ","  //   Organization.new({from: organizer}).then(","  //     function(organization) {","  //       organization.token_count.call().then(","  //         function(count) { ","  //           assert.equal(count, 0, \"Count doesn't match!\"); ","  //       }).then(","  //         function() { ","  //           return organization.numMembers.call(); ","  //       }).then(","  //         function(num) { ","  //           assert.equal(num, 0, \"Members doesn't match!\");","  //           return organization.organizer.call();","  //       }).then(","  //         function(organizer) { ","  //           assert.equal(organizer, organizer, \"Organizer doesn't match!\");","  //           done();","  //       }).catch(done);","  //   }).catch(done);","  // });","","  // it(\"Should update token_count, numMembers and balance upon adding member\", function(done) {","  //   var o = Organization.at(Organization.deployed_address);","    ","  //   Organization.new({from: organizer}).then(","  //     function(organization) {","  //       organization.token_count.call().then(","  //         function(count) { ","  //           assert.equal(count, 0, \"Count doesn't match!\"); ","  //       }).then(","  //         function() { ","  //           return organization.addMember(member1);","  //       }).then(","  //         function() { ","  //           return organization.token_count.call()","  //       }).then(","  //         function(count) { ","  //           assert.equal(count, 100, \"New token_count is not correct!\");","  //           return organization.numMembers.call()","  //       }).then(","  //         function(num) { ","  //           assert.equal(num, 1, \"New numMembers is not correct!\");","  //           return organization.members.call(member1)","  //       }).then(","  //         function(isMember) { ","  //           assert.equal(isMember, true, \"Member 1 is not registered\");","  //           return organization.balances.call(member1)","  //       }).then(","  //         function(balance) { ","  //           assert.equal(balance, 100, \"Balance is wrong\");","  //           done()","  //       }).catch(done);","  //   }).catch(done);","  // });","","  // it(\"Should update token_count, numMembers and balance upon removing member\", function(done) {","  //   var o = Organization.at(Organization.deployed_address);","    ","  //   Organization.new({from: organizer}).then(","  //     function(organization) {","  //       organization.token_count.call().then(","  //         function(count) { ","  //           assert.equal(count, 0, \"Count doesn't match!\"); ","  //       }).then(","  //         function() { ","  //           return organization.addMember(member1);","  //       }).then(","  //         function() { ","  //           return organization.removeMember(member1);","  //       }).then(","  //         function() { ","  //           return organization.token_count.call()","  //       }).then(","  //         function(count) { ","  //           assert.equal(count, 0, \"New token_count is not correct!\");","  //           return organization.numMembers.call()","  //       }).then(","  //         function(num) { ","  //           assert.equal(num, 0, \"New numMembers is not correct!\");","  //           return organization.members.call(member1)","  //       }).then(","  //         function(isMember) { ","  //           assert.equal(isMember, false, \"Member 1 is not registered\");","  //           return organization.balances.call(member1)","  //       }).then(","  //         function(balance) { ","  //           assert.equal(balance, 0, \"Balance is wrong\");","  //           done()","  //       }).catch(done);","  //   }).catch(done);","  // });","","  // it(\"Should update proposal array when creating proposal\", function(done) {","  //   var o = Organization.at(Organization.deployed_address);","    ","  //   Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","  //     function(organization) {","  //       organization.makeProposal('board election', 14491063620 + 10, 14491063620 +12).then(","  //         function() { ","  //           return organization.numProposals.call();","  //       }).then(","  //         function(num) { ","  //           assert.equal(num, 1, \"New numProposal wrong\")","  //           return organization.proposals(0)","  //       }).then(","  //         function(proposalAddress) { ","  //           var proposal = Proposal.at(proposalAddress)","  //           return proposal.name.call()","  //       }).then(","  //         function(name) { ","  //           assert.equal(name, 'board election', \"Proposal name is wrong\");","  //           done();","  //       }).catch(done);","  //   }).catch(done);","  // });","","  // it(\"Should forbid vote for non-member\", function(done) {","  //   var o = Organization.at(Organization.deployed_address);","  //   var p = {}","    ","  //   Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","  //     function(organization) {","  //       organization.makeProposal('board election', 14491063620 + 10, 14491063620 +12).then(","  //         function() { ","  //           return organization.proposals(0);","  //       }).then(","  //         function(proposalAddress) { ","  //           p = Proposal.at(proposalAddress)","  //           return organization.vote(true, 1, proposalAddress, {from: member1})            ","  //       }).then(","  //         function() { ","  //           return p.forVotes.call()","  //       }).then(","  //         function(numVotes) {  ","  //           assert.equal(numVotes, 0, \"Vote shouldn't be allowed\");","  //           done();","  //       }).catch(done);","  //   }).catch(done);","  // });","","  // it(\"Should allow vote for member\", function(done) {","  //   var o = Organization.at(Organization.deployed_address);","  //   var p = {}","    ","  //   Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","  //     function(organization) {","  //       organization.addMember(member1)","  //       .then(","  //         function() {","  //           return organization.toTime(0)","  //       }).then(","  //         function() { ","  //           return organization.makeProposal('board election', 4, 10);","  //       }).then(","  //         function() { ","  //           return organization.toTime(7)","  //       }).then(","  //         function() { ","  //           return organization.proposals(0)","  //       }).then(","  //         function(proposalAddress) { ","  //           p = Proposal.at(proposalAddress)","  //           p.toTime(7)","  //           return organization.proposals(0)           ","  //       }).then(","  //         function(proposalAddress) { ","  //           p = Proposal.at(proposalAddress)","  //           return organization.vote(true, 1, proposalAddress, {from: member1})            ","  //       }).then(","  //         function() { ","  //           return p.forVotes.call()","  //       }).then(","  //         function(numVotes) {  ","  //           assert.equal(numVotes.toString(10), 1, \"Vote should be allowed\");","  //           done();","  //       }).catch(done);","  //   }).catch(done);","  // });","","  // it(\"Should allow weighted vote for member\", function(done) {","  //   var o = Organization.at(Organization.deployed_address);","  //   var p = {}","    ","  //   Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","  //     function(organization) {","  //       organization.addMember(member1)","  //       .then(","  //         function() {","  //           return organization.toTime(0)","  //       }).then(","  //         function() {  ","  //           return organization.makeProposal('board election',  4, 10);","  //       }).then(","  //         function() { ","  //           return organization.toTime(7)","  //       }).then(","  //         function() { ","  //           return organization.proposals(0)","  //       }).then(","  //         function(proposalAddress) { ","  //           p = Proposal.at(proposalAddress)","  //           p.toTime(7)","  //           return organization.proposals(0)           ","  //       }).then(","  //         function(proposalAddress) { ","  //           console.log(proposalAddress)","  //           p = Proposal.at(proposalAddress)","  //           return organization.vote(true, 3, proposalAddress, {from: member1})            ","  //       }).then(","  //         function() { ","  //           return organization.balances.call(member1)","  //       }).then(","  //         function(balance) { ","  //           assert.equal(balance, 91, \"Wrong balance after vote\")","  //           return p.bal.call()","  //       }).then(","  //         function(propbalance) { ","  //           assert.equal(propbalance.toString(10), 9, \"Wrong propbalance after vote\")","  //           return p.forVotes.call()","  //       }).then(","  //         function(numVotes) {  ","  //           assert.equal(numVotes, 3, \"Vote should be allowed\");","  //           done();","  //       }).catch(done);","  //   }).catch(done);","  // });"],"id":493,"ignore":true}],[{"start":{"row":0,"column":0},"end":{"row":124,"column":0},"action":"remove","lines":["contract('organization', function(accounts) {","  console.log(accounts);","  var organizer = accounts[0];","  var member1 = accounts[1];","  var member2 = accounts[2];","","","","","  it(\"Should allow weighted vote for member\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    var p = {}","    ","    Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","      function(organization) {","        organization.addMember(member1).then(","          function() {","            return organization.toTime(0)","        }).then(","          organization.addMember(member2)).then(","          function() { ","            return organization.makeProposal('board election', 4, 10);","        }).then(","          function() { ","            return organization.toTime(7)","        }).then(","          function() { ","            return organization.proposals(0)","        }).then(","          function(proposalAddress) { ","            console.log(proposalAddress)","            p = Proposal.at(proposalAddress)","            p.toTime(7)","            organization.vote(true, 3, proposalAddress, {from: member1}) ","            return proposalAddress         ","        }).then(","          function(proposalAddress) {","            return organization.vote(false, 2, proposalAddress, {from: member2})   ","        }).then(","          function() { ","            return organization.balances.call(member1)","        }).then(","          function(balance) { ","            assert.equal(balance, 91, \"Wrong balance after vote\")","            return organization.balances.call(member2)","        }).then(","          function(balance) { ","            assert.equal(balance, 96, \"Wrong balance after vote\")","            return p.bal.call()","        }).then(","          function(propbalance) { ","            assert.equal(propbalance, 13, \"Wrong propbalance after vote\")","            return p.forVotes.call()","        }).then(","          function(numVotes) {  ","            assert.equal(numVotes, 3, \"Vote should be allowed\");","            done();","        }).catch(done);","    }).catch(done);","  });","","it(\"Should get result and redistribute tokens\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    var p = {}","    var paddress = {}","    ","    Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","      function(organization) {","        organization.addMember(member1).then(","          function() {","            return organization.toTime(0)","        }).then(","          function() {","            return organization.addMember(member2)","        }).then(","          function() { ","            return organization.makeProposal('board election', 4, 10);","        }).then(","          function() { ","            return organization.toTime(7)","        }).then(","          function() { ","            return organization.proposals(0)","        }).then(","          function(proposalAddress) { ","            console.log(proposalAddress)","            paddress = proposalAddress","            p = Proposal.at(proposalAddress)","            p.toTime(7)","            organization.vote(true, 4, proposalAddress, {from: member1})          ","            organization.vote(false, 2, proposalAddress, {from: member2})            ","        }).then(","          function() {","            return organization.balances.call(member1)","        }).then(","          function(balance) { ","            assert.equal(balance, 84, \"Wrong balance after vote for member1\")","            return organization.balances.call(member2)","        }).then(","          function(balance) {","            assert.equal(balance, 96, \"Wrong balance after vote for member2\")","            organization.toTime(13)","            p.toTime(13)","            organization.getResult(paddress)","            return organization.propResults.call(paddress)","        }).then(","          function(result) {  ","            assert.equal(result, 1, \"Proposal should be adopted\");","            return p.bal.call()","        }).then(","          function() { ","            return organization.balances.call(member1)","          }).then(","          function(newbalance1) { ","            assert.equal(newbalance1.toString(10), 94, \"Wrong balance after vote for member2\")","            return organization.balances.call(member2)","          }).then(","          function(newbalance2) { ","            assert.equal(newbalance2, 106, \"Wrong balance after vote for member2\")","            done();","        }).catch(done);","    }).catch(done);","  });","});",""],"id":494,"ignore":true},{"start":{"row":0,"column":0},"end":{"row":352,"column":0},"action":"insert","lines":["contract('organization', function(accounts) {","  console.log(accounts);","  var organizer = accounts[0];","  var member1 = accounts[1];","  var member2 = accounts[2];","","  it(\"Initial organization settings should match\", function(done) {","","    var o = Organization.at(Organization.deployed_address);","    ","    Organization.new({from: organizer}).then(","      function(organization) {","        organization.token_count.call().then(","          function(count) { ","            assert.equal(count, 0, \"Count doesn't match!\"); ","        }).then(","          function() { ","            return organization.numMembers.call(); ","        }).then(","          function(num) { ","            assert.equal(num, 0, \"Members doesn't match!\");","            return organization.organizer.call();","        }).then(","          function(organizer) { ","            assert.equal(organizer, organizer, \"Organizer doesn't match!\");","            done();","        }).catch(done);","    }).catch(done);","  });","","  it(\"Should update token_count, numMembers and balance upon adding member\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    ","    Organization.new({from: organizer}).then(","      function(organization) {","        organization.token_count.call().then(","          function(count) { ","            assert.equal(count, 0, \"Count doesn't match!\"); ","        }).then(","          function() { ","            return organization.addMember(member1);","        }).then(","          function() { ","            return organization.token_count.call()","        }).then(","          function(count) { ","            assert.equal(count, 100, \"New token_count is not correct!\");","            return organization.numMembers.call()","        }).then(","          function(num) { ","            assert.equal(num, 1, \"New numMembers is not correct!\");","            return organization.members.call(member1)","        }).then(","          function(isMember) { ","            assert.equal(isMember, true, \"Member 1 is not registered\");","            return organization.balances.call(member1)","        }).then(","          function(balance) { ","            assert.equal(balance, 100, \"Balance is wrong\");","            done()","        }).catch(done);","    }).catch(done);","  });","","  it(\"Should update token_count, numMembers and balance upon removing member\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    ","    Organization.new({from: organizer}).then(","      function(organization) {","        organization.token_count.call().then(","          function(count) { ","            assert.equal(count, 0, \"Count doesn't match!\"); ","        }).then(","          function() { ","            return organization.addMember(member1);","        }).then(","          function() { ","            return organization.removeMember(member1);","        }).then(","          function() { ","            return organization.token_count.call()","        }).then(","          function(count) { ","            assert.equal(count, 0, \"New token_count is not correct!\");","            return organization.numMembers.call()","        }).then(","          function(num) { ","            assert.equal(num, 0, \"New numMembers is not correct!\");","            return organization.members.call(member1)","        }).then(","          function(isMember) { ","            assert.equal(isMember, false, \"Member 1 is not registered\");","            return organization.balances.call(member1)","        }).then(","          function(balance) { ","            assert.equal(balance, 0, \"Balance is wrong\");","            done()","        }).catch(done);","    }).catch(done);","  });","","  it(\"Should update proposal array when creating proposal\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    ","    Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","      function(organization) {","        organization.makeProposal('board election', 14491063620 + 10, 14491063620 +12).then(","          function() { ","            return organization.numProposals.call();","        }).then(","          function(num) { ","            assert.equal(num, 1, \"New numProposal wrong\")","            return organization.proposals(0)","        }).then(","          function(proposalAddress) { ","            var proposal = Proposal.at(proposalAddress)","            return proposal.name.call()","        }).then(","          function(name) { ","            assert.equal(name, 'board election', \"Proposal name is wrong\");","            done();","        }).catch(done);","    }).catch(done);","  });","","  it(\"Should forbid vote for non-member\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    var p = {}","    ","    Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","      function(organization) {","        organization.makeProposal('board election', 14491063620 + 10, 14491063620 +12).then(","          function() { ","            return organization.proposals(0);","        }).then(","          function(proposalAddress) { ","            p = Proposal.at(proposalAddress)","            return organization.vote(true, 1, proposalAddress, {from: member1})            ","        }).then(","          function() { ","            return p.forVotes.call()","        }).then(","          function(numVotes) {  ","            assert.equal(numVotes, 0, \"Vote shouldn't be allowed\");","            done();","        }).catch(done);","    }).catch(done);","  });","","  it(\"Should allow vote for member\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    var p = {}","    ","    Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","      function(organization) {","        organization.addMember(member1)","        .then(","          function() {","            return organization.toTime(0)","        }).then(","          function() { ","            return organization.makeProposal('board election', 4, 10);","        }).then(","          function() { ","            return organization.toTime(7)","        }).then(","          function() { ","            return organization.proposals(0)","        }).then(","          function(proposalAddress) { ","            p = Proposal.at(proposalAddress)","            p.toTime(7)","            return organization.proposals(0)           ","        }).then(","          function(proposalAddress) { ","            p = Proposal.at(proposalAddress)","            return organization.vote(true, 1, proposalAddress, {from: member1})            ","        }).then(","          function() { ","            return p.forVotes.call()","        }).then(","          function(numVotes) {  ","            assert.equal(numVotes.toString(10), 1, \"Vote should be allowed\");","            done();","        }).catch(done);","    }).catch(done);","  });","","  it(\"Should allow weighted vote for member\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    var p = {}","    ","    Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","      function(organization) {","        organization.addMember(member1)","        .then(","          function() {","            return organization.toTime(0)","        }).then(","          function() {  ","            return organization.makeProposal('board election',  4, 10);","        }).then(","          function() { ","            return organization.toTime(7)","        }).then(","          function() { ","            return organization.proposals(0)","        }).then(","          function(proposalAddress) { ","            p = Proposal.at(proposalAddress)","            p.toTime(7)","            return organization.proposals(0)           ","        }).then(","          function(proposalAddress) { ","            console.log(proposalAddress)","            p = Proposal.at(proposalAddress)","            return organization.vote(true, 3, proposalAddress, {from: member1})            ","        }).then(","          function() { ","            return organization.balances.call(member1)","        }).then(","          function(balance) { ","            assert.equal(balance, 91, \"Wrong balance after vote\")","            return p.bal.call()","        }).then(","          function(propbalance) { ","            assert.equal(propbalance.toString(10), 9, \"Wrong propbalance after vote\")","            return p.forVotes.call()","        }).then(","          function(numVotes) {  ","            assert.equal(numVotes, 3, \"Vote should be allowed\");","            done();","        }).catch(done);","    }).catch(done);","  });","","","  it(\"Should allow weighted vote for member\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    var p = {}","    ","    Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","      function(organization) {","        organization.addMember(member1).then(","          function() {","            return organization.toTime(0)","        }).then(","          organization.addMember(member2)).then(","          function() { ","            return organization.makeProposal('board election', 4, 10);","        }).then(","          function() { ","            return organization.toTime(7)","        }).then(","          function() { ","            return organization.proposals(0)","        }).then(","          function(proposalAddress) { ","            console.log(proposalAddress)","            p = Proposal.at(proposalAddress)","            p.toTime(7)","            organization.vote(true, 3, proposalAddress, {from: member1}) ","            return proposalAddress         ","        }).then(","          function(proposalAddress) {","            return organization.vote(false, 2, proposalAddress, {from: member2})   ","        }).then(","          function() { ","            return organization.balances.call(member1)","        }).then(","          function(balance) { ","            assert.equal(balance, 91, \"Wrong balance after vote\")","            return organization.balances.call(member2)","        }).then(","          function(balance) { ","            assert.equal(balance, 96, \"Wrong balance after vote\")","            return p.bal.call()","        }).then(","          function(propbalance) { ","            assert.equal(propbalance, 13, \"Wrong propbalance after vote\")","            return p.forVotes.call()","        }).then(","          function(numVotes) {  ","            assert.equal(numVotes, 3, \"Vote should be allowed\");","            done();","        }).catch(done);","    }).catch(done);","  });","","it(\"Should get result and redistribute tokens\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    var p = {}","    var paddress = {}","    ","    Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","      function(organization) {","        organization.addMember(member1).then(","          function() {","            return organization.toTime(0)","        }).then(","          function() {","            return organization.addMember(member2)","        }).then(","          function() { ","            return organization.makeProposal('board election', 4, 10);","        }).then(","          function() { ","            return organization.toTime(7)","        }).then(","          function() { ","            return organization.proposals(0)","        }).then(","          function(proposalAddress) { ","            console.log(proposalAddress)","            paddress = proposalAddress","            p = Proposal.at(proposalAddress)","            p.toTime(7)","            organization.vote(true, 4, proposalAddress, {from: member1})          ","            organization.vote(false, 2, proposalAddress, {from: member2})            ","        }).then(","          function() {","            return organization.balances.call(member1)","        }).then(","          function(balance) { ","            assert.equal(balance, 84, \"Wrong balance after vote for member1\")","            return organization.balances.call(member2)","        }).then(","          function(balance) {","            assert.equal(balance, 96, \"Wrong balance after vote for member2\")","            organization.toTime(13)","            p.toTime(13)","            organization.getResult(paddress)","            return organization.propResults.call(paddress)","        }).then(","          function(result) {  ","            assert.equal(result, 1, \"Proposal should be adopted\");","            return p.bal.call()","        }).then(","          function() { ","            return organization.balances.call(member1)","          }).then(","          function(newbalance1) { ","            assert.equal(newbalance1.toString(10), 94, \"Wrong balance after vote for member2\")","            return organization.balances.call(member2)","          }).then(","          function(newbalance2) { ","            assert.equal(newbalance2, 106, \"Wrong balance after vote for member2\")","            done();","        }).catch(done);","    }).catch(done);","  });","});",""]}],[{"start":{"row":0,"column":0},"end":{"row":352,"column":0},"action":"remove","lines":["contract('organization', function(accounts) {","  console.log(accounts);","  var organizer = accounts[0];","  var member1 = accounts[1];","  var member2 = accounts[2];","","  it(\"Initial organization settings should match\", function(done) {","","    var o = Organization.at(Organization.deployed_address);","    ","    Organization.new({from: organizer}).then(","      function(organization) {","        organization.token_count.call().then(","          function(count) { ","            assert.equal(count, 0, \"Count doesn't match!\"); ","        }).then(","          function() { ","            return organization.numMembers.call(); ","        }).then(","          function(num) { ","            assert.equal(num, 0, \"Members doesn't match!\");","            return organization.organizer.call();","        }).then(","          function(organizer) { ","            assert.equal(organizer, organizer, \"Organizer doesn't match!\");","            done();","        }).catch(done);","    }).catch(done);","  });","","  it(\"Should update token_count, numMembers and balance upon adding member\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    ","    Organization.new({from: organizer}).then(","      function(organization) {","        organization.token_count.call().then(","          function(count) { ","            assert.equal(count, 0, \"Count doesn't match!\"); ","        }).then(","          function() { ","            return organization.addMember(member1);","        }).then(","          function() { ","            return organization.token_count.call()","        }).then(","          function(count) { ","            assert.equal(count, 100, \"New token_count is not correct!\");","            return organization.numMembers.call()","        }).then(","          function(num) { ","            assert.equal(num, 1, \"New numMembers is not correct!\");","            return organization.members.call(member1)","        }).then(","          function(isMember) { ","            assert.equal(isMember, true, \"Member 1 is not registered\");","            return organization.balances.call(member1)","        }).then(","          function(balance) { ","            assert.equal(balance, 100, \"Balance is wrong\");","            done()","        }).catch(done);","    }).catch(done);","  });","","  it(\"Should update token_count, numMembers and balance upon removing member\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    ","    Organization.new({from: organizer}).then(","      function(organization) {","        organization.token_count.call().then(","          function(count) { ","            assert.equal(count, 0, \"Count doesn't match!\"); ","        }).then(","          function() { ","            return organization.addMember(member1);","        }).then(","          function() { ","            return organization.removeMember(member1);","        }).then(","          function() { ","            return organization.token_count.call()","        }).then(","          function(count) { ","            assert.equal(count, 0, \"New token_count is not correct!\");","            return organization.numMembers.call()","        }).then(","          function(num) { ","            assert.equal(num, 0, \"New numMembers is not correct!\");","            return organization.members.call(member1)","        }).then(","          function(isMember) { ","            assert.equal(isMember, false, \"Member 1 is not registered\");","            return organization.balances.call(member1)","        }).then(","          function(balance) { ","            assert.equal(balance, 0, \"Balance is wrong\");","            done()","        }).catch(done);","    }).catch(done);","  });","","  it(\"Should update proposal array when creating proposal\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    ","    Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","      function(organization) {","        organization.makeProposal('board election', 14491063620 + 10, 14491063620 +12).then(","          function() { ","            return organization.numProposals.call();","        }).then(","          function(num) { ","            assert.equal(num, 1, \"New numProposal wrong\")","            return organization.proposals(0)","        }).then(","          function(proposalAddress) { ","            var proposal = Proposal.at(proposalAddress)","            return proposal.name.call()","        }).then(","          function(name) { ","            assert.equal(name, 'board election', \"Proposal name is wrong\");","            done();","        }).catch(done);","    }).catch(done);","  });","","  it(\"Should forbid vote for non-member\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    var p = {}","    ","    Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","      function(organization) {","        organization.makeProposal('board election', 14491063620 + 10, 14491063620 +12).then(","          function() { ","            return organization.proposals(0);","        }).then(","          function(proposalAddress) { ","            p = Proposal.at(proposalAddress)","            return organization.vote(true, 1, proposalAddress, {from: member1})            ","        }).then(","          function() { ","            return p.forVotes.call()","        }).then(","          function(numVotes) {  ","            assert.equal(numVotes, 0, \"Vote shouldn't be allowed\");","            done();","        }).catch(done);","    }).catch(done);","  });","","  it(\"Should allow vote for member\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    var p = {}","    ","    Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","      function(organization) {","        organization.addMember(member1)","        .then(","          function() {","            return organization.toTime(0)","        }).then(","          function() { ","            return organization.makeProposal('board election', 4, 10);","        }).then(","          function() { ","            return organization.toTime(7)","        }).then(","          function() { ","            return organization.proposals(0)","        }).then(","          function(proposalAddress) { ","            p = Proposal.at(proposalAddress)","            p.toTime(7)","            return organization.proposals(0)           ","        }).then(","          function(proposalAddress) { ","            p = Proposal.at(proposalAddress)","            return organization.vote(true, 1, proposalAddress, {from: member1})            ","        }).then(","          function() { ","            return p.forVotes.call()","        }).then(","          function(numVotes) {  ","            assert.equal(numVotes.toString(10), 1, \"Vote should be allowed\");","            done();","        }).catch(done);","    }).catch(done);","  });","","  it(\"Should allow weighted vote for member\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    var p = {}","    ","    Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","      function(organization) {","        organization.addMember(member1)","        .then(","          function() {","            return organization.toTime(0)","        }).then(","          function() {  ","            return organization.makeProposal('board election',  4, 10);","        }).then(","          function() { ","            return organization.toTime(7)","        }).then(","          function() { ","            return organization.proposals(0)","        }).then(","          function(proposalAddress) { ","            p = Proposal.at(proposalAddress)","            p.toTime(7)","            return organization.proposals(0)           ","        }).then(","          function(proposalAddress) { ","            console.log(proposalAddress)","            p = Proposal.at(proposalAddress)","            return organization.vote(true, 3, proposalAddress, {from: member1})            ","        }).then(","          function() { ","            return organization.balances.call(member1)","        }).then(","          function(balance) { ","            assert.equal(balance, 91, \"Wrong balance after vote\")","            return p.bal.call()","        }).then(","          function(propbalance) { ","            assert.equal(propbalance.toString(10), 9, \"Wrong propbalance after vote\")","            return p.forVotes.call()","        }).then(","          function(numVotes) {  ","            assert.equal(numVotes, 3, \"Vote should be allowed\");","            done();","        }).catch(done);","    }).catch(done);","  });","","","  it(\"Should allow weighted vote for member\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    var p = {}","    ","    Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","      function(organization) {","        organization.addMember(member1).then(","          function() {","            return organization.toTime(0)","        }).then(","          organization.addMember(member2)).then(","          function() { ","            return organization.makeProposal('board election', 4, 10);","        }).then(","          function() { ","            return organization.toTime(7)","        }).then(","          function() { ","            return organization.proposals(0)","        }).then(","          function(proposalAddress) { ","            console.log(proposalAddress)","            p = Proposal.at(proposalAddress)","            p.toTime(7)","            organization.vote(true, 3, proposalAddress, {from: member1}) ","            return proposalAddress         ","        }).then(","          function(proposalAddress) {","            return organization.vote(false, 2, proposalAddress, {from: member2})   ","        }).then(","          function() { ","            return organization.balances.call(member1)","        }).then(","          function(balance) { ","            assert.equal(balance, 91, \"Wrong balance after vote\")","            return organization.balances.call(member2)","        }).then(","          function(balance) { ","            assert.equal(balance, 96, \"Wrong balance after vote\")","            return p.bal.call()","        }).then(","          function(propbalance) { ","            assert.equal(propbalance, 13, \"Wrong propbalance after vote\")","            return p.forVotes.call()","        }).then(","          function(numVotes) {  ","            assert.equal(numVotes, 3, \"Vote should be allowed\");","            done();","        }).catch(done);","    }).catch(done);","  });","","it(\"Should get result and redistribute tokens\", function(done) {","    var o = Organization.at(Organization.deployed_address);","    var p = {}","    var paddress = {}","    ","    Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","      function(organization) {","        organization.addMember(member1).then(","          function() {","            return organization.toTime(0)","        }).then(","          function() {","            return organization.addMember(member2)","        }).then(","          function() { ","            return organization.makeProposal('board election', 4, 10);","        }).then(","          function() { ","            return organization.toTime(7)","        }).then(","          function() { ","            return organization.proposals(0)","        }).then(","          function(proposalAddress) { ","            console.log(proposalAddress)","            paddress = proposalAddress","            p = Proposal.at(proposalAddress)","            p.toTime(7)","            organization.vote(true, 4, proposalAddress, {from: member1})          ","            organization.vote(false, 2, proposalAddress, {from: member2})            ","        }).then(","          function() {","            return organization.balances.call(member1)","        }).then(","          function(balance) { ","            assert.equal(balance, 84, \"Wrong balance after vote for member1\")","            return organization.balances.call(member2)","        }).then(","          function(balance) {","            assert.equal(balance, 96, \"Wrong balance after vote for member2\")","            organization.toTime(13)","            p.toTime(13)","            organization.getResult(paddress)","            return organization.propResults.call(paddress)","        }).then(","          function(result) {  ","            assert.equal(result, 1, \"Proposal should be adopted\");","            return p.bal.call()","        }).then(","          function() { ","            return organization.balances.call(member1)","          }).then(","          function(newbalance1) { ","            assert.equal(newbalance1.toString(10), 94, \"Wrong balance after vote for member2\")","            return organization.balances.call(member2)","          }).then(","          function(newbalance2) { ","            assert.equal(newbalance2, 106, \"Wrong balance after vote for member2\")","            done();","        }).catch(done);","    }).catch(done);","  });","});",""],"id":495},{"start":{"row":0,"column":0},"end":{"row":384,"column":0},"action":"insert","lines":["  contract('Organizations', function(accounts) {","    console.log(accounts);","    var creator = accounts[0];","    var member1 = accounts[1];","    var member2 = accounts[2];","  ","    it(\"Should let anyone create a Factory, as the factoryManager. And anyone create an organization\", function(done) {","    \tvar org = {}","    \tvar organizationAddr;","    //  var o = Organizations.at(Organizations.deployed_address);","      ","      OrganizationsFactory.new({from: creator}).then(","        function (contract) {","        contract.factoryManager.call()","        .then(","        \tfunction(createdBy) { ","            \tassert.equal(createdBy, creator, \"Owner address is wrong!\"); ","        }).then(","        \tfunction(name) { ","            \tcontract.NewOrganization(\"ONU\", 100, 1000, {from: member1});","            \treturn contract.organizationID.call()","        }).then(","\t    \tfunction(ID) { ","\t        \tassert.equal(ID, 1, \"organizationID has not incremented\");","\t        \treturn contract.numOrganizations.call()","\t    }).then(","\t    \tfunction(NbOrg) { ","\t        \tassert.equal(NbOrg, 1, \"Adress of the organization not in organizations\");","\t        \treturn contract.organizations.call(0);","\t    }).then(","\t    \tfunction(addr) { ","\t    \t\tconsole.log(addr);","\t    \t\torganizationAddr = addr;","\t    \t\torg = Organization.at(addr);","\t        \treturn org.organizationOwner.call();","\t    }).then(","\t    \tfunction(organizationowner) { ","\t        \tassert.equal(organizationowner, member1, \"member1 is not the organizationowner\");","\t        \tcontract.DeleteOrganization(organizationAddr);","\t        \treturn contract.numOrganizations.call() ","\t    }).then(","\t    \tfunction(numorg) { ","\t        \tassert.equal(numorg, 1, \"Num org should be 1, deletion should not have been completed\");","\t          \tcontract.DeleteOrganization(organizationAddr, {from: member1});","\t        \treturn contract.numOrganizations.call() ","\t    }).then(","\t    \tfunction(numorg) { ","\t        \tassert.equal(numorg, 0, \"Numorg should be 0, deletion should have been completed\")","            \tdone();","        }).catch(done);","      }).catch(done);","    });","  ","  //   // it(\"Should let anyone create an organization with the right parameters\", function(done) {","  //   //   //var o = Organizations.at(Organization.deployed_address);","      ","  //   //   Organizations.new({from: creator}).then(","  //   //     function(contract) {","  //   //     \tconsole.log(0)","  //   //       contract.NewOrganization(\"FirstOrg\", 100, {from: member1}).then(","  //   //         function() { ","  //   //          return contract.organizations.call(0);","  //   //          console.log(2)","  //   //       }).then(","  //   //         function(name) { ","  //   //           console.log(name); ","  //   //           name.name","  //   //       }).then(","  //   //         function(name) { ","  //   //           assert.equal(name, \"FirstOrg\", \"Count doesn't match!\"); ","  //   //      /* }).then(","  //   //         function() { ","  //   //           return organization.addMember(member1);","  //   //       }).then(","  //   //         function() { ","  //   //           return organization.token_count.call()","  //   //       }).then(","  //   //         function(count) { ","  //   //           assert.equal(count, 100, \"New token_count is not correct!\");","  //   //           return organization.numMembers.call()","  //         }).then(","  //           function(num) { ","  //             assert.equal(num, 1, \"New numMembers is not correct!\");","  //             return organization.members.call(member1)","  //         }).then(","  //           function(isMember) { ","  //             assert.equal(isMember, true, \"Member 1 is not registered\");","  //             return organization.balances.call(member1)","  //         }).then(","  //           function(balance) { ","  //             assert.equal(balance, 100, \"Balance is wrong\");*/","  //             done()","  //         }).catch(done);","  //     }).catch(done);","  //   });","  ","  //   it(\"Should update token_count, numMembers and balance upon removing member\", function(done) {","  //     var o = Organization.at(Organization.deployed_address);","      ","  //     Organization.new({from: organizer}).then(","  //       function(organization) {","  //         organization.token_count.call().then(","  //           function(count) { ","  //             assert.equal(count, 0, \"Count doesn't match!\"); ","  //         }).then(","  //           function() { ","  //             return organization.addMember(member1);","  //         }).then(","  //           function() { ","  //             return organization.removeMember(member1);","  //         }).then(","  //           function() { ","  //             return organization.token_count.call()","  //         }).then(","  //           function(count) { ","  //             assert.equal(count, 0, \"New token_count is not correct!\");","  //             return organization.numMembers.call()","  //         }).then(","  //           function(num) { ","  //             assert.equal(num, 0, \"New numMembers is not correct!\");","  //             return organization.members.call(member1)","  //         }).then(","  //           function(isMember) { ","  //             assert.equal(isMember, false, \"Member 1 is not registered\");","  //             return organization.balances.call(member1)","  //         }).then(","  //           function(balance) { ","  //             assert.equal(balance, 0, \"Balance is wrong\");","  //             done()","  //         }).catch(done);","  //     }).catch(done);","  //   });","  ","  //   it(\"Should update proposal array when creating proposal\", function(done) {","  //     var o = Organization.at(Organization.deployed_address);","      ","  //     Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","  //       function(organization) {","  //         organization.makeProposal('board election', 14491063620 + 10, 14491063620 +12).then(","  //           function() { ","  //             return organization.numProposals.call();","  //         }).then(","  //           function(num) { ","  //             assert.equal(num, 1, \"New numProposal wrong\")","  //             return organization.proposals(0)","  //         }).then(","  //           function(proposalAddress) { ","  //             var proposal = Proposal.at(proposalAddress)","  //             return proposal.name.call()","  //         }).then(","  //           function(name) { ","  //             assert.equal(name, 'board election', \"Proposal name is wrong\");","  //             done();","  //         }).catch(done);","  //     }).catch(done);","  //   });","  ","  //   it(\"Should forbid vote for non-member\", function(done) {","  //     var o = Organization.at(Organization.deployed_address);","  //     var p = {}","      ","  //     Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","  //       function(organization) {","  //         organization.makeProposal('board election', 14491063620 + 10, 14491063620 +12).then(","  //           function() { ","  //             return organization.proposals(0);","  //         }).then(","  //           function(proposalAddress) { ","  //             p = Proposal.at(proposalAddress)","  //             return organization.vote(true, 1, proposalAddress, {from: member1})            ","  //         }).then(","  //           function() { ","  //             return p.forVotes.call()","  //         }).then(","  //           function(numVotes) {  ","  //             assert.equal(numVotes, 0, \"Vote shouldn't be allowed\");","  //             done();","  //         }).catch(done);","  //     }).catch(done);","  //   });","  ","  //   it(\"Should allow vote for member\", function(done) {","  //     var o = Organization.at(Organization.deployed_address);","  //     var p = {}","      ","  //     Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","  //       function(organization) {","  //         organization.addMember(member1)","  //         .then(","  //           function() {","  //             return organization.toTime(0)","  //         }).then(","  //           function() { ","  //             return organization.makeProposal('board election', 4, 10);","  //         }).then(","  //           function() { ","  //             return organization.toTime(7)","  //         }).then(","  //           function() { ","  //             return organization.proposals(0)","  //         }).then(","  //           function(proposalAddress) { ","  //             p = Proposal.at(proposalAddress)","  //             p.toTime(7)","  //             return organization.proposals(0)           ","  //         }).then(","  //           function(proposalAddress) { ","  //             p = Proposal.at(proposalAddress)","  //             return organization.vote(true, 1, proposalAddress, {from: member1})            ","  //         }).then(","  //           function() { ","  //             return p.forVotes.call()","  //         }).then(","  //           function(numVotes) {  ","  //             assert.equal(numVotes.toString(10), 1, \"Vote should be allowed\");","  //             done();","  //         }).catch(done);","  //     }).catch(done);","  //   });","  ","  //   it(\"Should allow weighted vote for member\", function(done) {","  //     var o = Organization.at(Organization.deployed_address);","  //     var p = {}","      ","  //     Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","  //       function(organization) {","  //         organization.addMember(member1)","  //         .then(","  //           function() {","  //             return organization.toTime(0)","  //         }).then(","  //           function() {  ","  //             return organization.makeProposal('board election',  4, 10);","  //         }).then(","  //           function() { ","  //             return organization.toTime(7)","  //         }).then(","  //           function() { ","  //             return organization.proposals(0)","  //         }).then(","  //           function(proposalAddress) { ","  //             p = Proposal.at(proposalAddress)","  //             p.toTime(7)","  //             return organization.proposals(0)           ","  //         }).then(","  //           function(proposalAddress) { ","  //             console.log(proposalAddress)","  //             p = Proposal.at(proposalAddress)","  //             return organization.vote(true, 3, proposalAddress, {from: member1})            ","  //         }).then(","  //           function() { ","  //             return organization.balances.call(member1)","  //         }).then(","  //           function(balance) { ","  //             assert.equal(balance, 91, \"Wrong balance after vote\")","  //             return p.bal.call()","  //         }).then(","  //           function(propbalance) { ","  //             assert.equal(propbalance.toString(10), 9, \"Wrong propbalance after vote\")","  //             return p.forVotes.call()","  //         }).then(","  //           function(numVotes) {  ","  //             assert.equal(numVotes, 3, \"Vote should be allowed\");","  //             done();","  //         }).catch(done);","  //     }).catch(done);","  //   });","  ","  ","  //   it(\"Should allow weighted vote for member\", function(done) {","  //     var o = Organization.at(Organization.deployed_address);","  //     var p = {}","      ","  //     Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","  //       function(organization) {","  //         organization.addMember(member1).then(","  //           function() {","  //             return organization.toTime(0)","  //         }).then(","  //           organization.addMember(member2)).then(","  //           function() { ","  //             return organization.makeProposal('board election', 4, 10);","  //         }).then(","  //           function() { ","  //             return organization.toTime(7)","  //         }).then(","  //           function() { ","  //             return organization.proposals(0)","  //         }).then(","  //           function(proposalAddress) { ","  //             console.log(proposalAddress)","  //             p = Proposal.at(proposalAddress)","  //             p.toTime(7)","  //             organization.vote(true, 3, proposalAddress, {from: member1}) ","  //             return proposalAddress         ","  //         }).then(","  //           function(proposalAddress) {","  //             return organization.vote(false, 2, proposalAddress, {from: member2})   ","  //         }).then(","  //           function() { ","  //             return organization.balances.call(member1)","  //         }).then(","  //           function(balance) { ","  //             assert.equal(balance, 91, \"Wrong balance after vote\")","  //             return organization.balances.call(member2)","  //         }).then(","  //           function(balance) { ","  //             assert.equal(balance, 96, \"Wrong balance after vote\")","  //             return p.bal.call()","  //         }).then(","  //           function(propbalance) { ","  //             assert.equal(propbalance, 13, \"Wrong propbalance after vote\")","  //             return p.forVotes.call()","  //         }).then(","  //           function(numVotes) {  ","  //             assert.equal(numVotes, 3, \"Vote should be allowed\");","  //             done();","  //         }).catch(done);","  //     }).catch(done);","  //   });","  ","  // it(\"Should get result and redistribute tokens\", function(done) {","  //     var o = Organization.at(Organization.deployed_address);","  //     var p = {}","  //     var paddress = {}","      ","  //     Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","  //       function(organization) {","  //         organization.addMember(member1).then(","  //           function() {","  //             return organization.toTime(0)","  //         }).then(","  //           function() {","  //             return organization.addMember(member2)","  //         }).then(","  //           function() { ","  //             return organization.makeProposal('board election', 4, 10);","  //         }).then(","  //           function() { ","  //             return organization.toTime(7)","  //         }).then(","  //           function() { ","  //             return organization.proposals(0)","  //         }).then(","  //           function(proposalAddress) { ","  //             console.log(proposalAddress)","  //             paddress = proposalAddress","  //             p = Proposal.at(proposalAddress)","  //             p.toTime(7)","  //             organization.vote(true, 4, proposalAddress, {from: member1})          ","  //             organization.vote(false, 2, proposalAddress, {from: member2})            ","  //         }).then(","  //           function() {","  //             return organization.balances.call(member1)","  //         }).then(","  //           function(balance) { ","  //             assert.equal(balance, 84, \"Wrong balance after vote for member1\")","  //             return organization.balances.call(member2)","  //         }).then(","  //           function(balance) {","  //             assert.equal(balance, 96, \"Wrong balance after vote for member2\")","  //             organization.toTime(13)","  //             p.toTime(13)","  //             organization.getResult(paddress)","  //             return organization.propResults.call(paddress)","  //         }).then(","  //           function(result) {  ","  //             assert.equal(result, 1, \"Proposal should be adopted\");","  //             return p.bal.call()","  //         }).then(","  //           function() { ","  //             return organization.balances.call(member1)","  //           }).then(","  //           function(newbalance1) { ","  //             assert.equal(newbalance1.toString(10), 94, \"Wrong balance after vote for member2\")","  //             return organization.balances.call(member2)","  //           }).then(","  //           function(newbalance2) { ","  //             assert.equal(newbalance2, 106, \"Wrong balance after vote for member2\")","  //             done();","  //         }).catch(done);","  //     }).catch(done);","  //   });","   });",""]}],[{"start":{"row":0,"column":1},"end":{"row":0,"column":2},"action":"insert","lines":["*"],"id":496}],[{"start":{"row":0,"column":2},"end":{"row":0,"column":3},"action":"insert","lines":["/"],"id":497}],[{"start":{"row":384,"column":0},"end":{"row":384,"column":1},"action":"insert","lines":["*"],"id":498}],[{"start":{"row":384,"column":1},"end":{"row":384,"column":2},"action":"insert","lines":["/"],"id":499}],[{"start":{"row":384,"column":1},"end":{"row":384,"column":2},"action":"remove","lines":["/"],"id":500}],[{"start":{"row":384,"column":0},"end":{"row":384,"column":1},"action":"remove","lines":["*"],"id":501}],[{"start":{"row":0,"column":2},"end":{"row":0,"column":3},"action":"remove","lines":["/"],"id":502}],[{"start":{"row":0,"column":1},"end":{"row":0,"column":2},"action":"remove","lines":["*"],"id":503}],[{"start":{"row":0,"column":48},"end":{"row":1,"column":0},"action":"insert","lines":["",""],"id":504},{"start":{"row":1,"column":0},"end":{"row":1,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":1,"column":4},"end":{"row":1,"column":5},"action":"insert","lines":["/"],"id":505}],[{"start":{"row":1,"column":5},"end":{"row":1,"column":6},"action":"insert","lines":["*"],"id":506}],[{"start":{"row":385,"column":0},"end":{"row":385,"column":1},"action":"insert","lines":["*"],"id":507}],[{"start":{"row":385,"column":1},"end":{"row":385,"column":2},"action":"insert","lines":["/"],"id":508}],[{"start":{"row":385,"column":1},"end":{"row":385,"column":2},"action":"remove","lines":["/"],"id":509}],[{"start":{"row":385,"column":0},"end":{"row":385,"column":1},"action":"remove","lines":["*"],"id":510}],[{"start":{"row":384,"column":6},"end":{"row":385,"column":0},"action":"remove","lines":["",""],"id":511}],[{"start":{"row":384,"column":4},"end":{"row":384,"column":5},"action":"insert","lines":["*"],"id":512}],[{"start":{"row":384,"column":5},"end":{"row":384,"column":6},"action":"insert","lines":["/"],"id":513}],[{"start":{"row":384,"column":5},"end":{"row":384,"column":6},"action":"remove","lines":["/"],"id":514}],[{"start":{"row":384,"column":4},"end":{"row":384,"column":5},"action":"remove","lines":["*"],"id":515}],[{"start":{"row":384,"column":0},"end":{"row":384,"column":1},"action":"insert","lines":["*"],"id":516}],[{"start":{"row":384,"column":1},"end":{"row":384,"column":2},"action":"insert","lines":["/"],"id":517}],[{"start":{"row":384,"column":1},"end":{"row":384,"column":2},"action":"remove","lines":["/"],"id":518}],[{"start":{"row":384,"column":0},"end":{"row":384,"column":1},"action":"remove","lines":["*"],"id":519}],[{"start":{"row":0,"column":0},"end":{"row":384,"column":6},"action":"remove","lines":["  contract('Organizations', function(accounts) {","    /*","    console.log(accounts);","    var creator = accounts[0];","    var member1 = accounts[1];","    var member2 = accounts[2];","  ","    it(\"Should let anyone create a Factory, as the factoryManager. And anyone create an organization\", function(done) {","    \tvar org = {}","    \tvar organizationAddr;","    //  var o = Organizations.at(Organizations.deployed_address);","      ","      OrganizationsFactory.new({from: creator}).then(","        function (contract) {","        contract.factoryManager.call()","        .then(","        \tfunction(createdBy) { ","            \tassert.equal(createdBy, creator, \"Owner address is wrong!\"); ","        }).then(","        \tfunction(name) { ","            \tcontract.NewOrganization(\"ONU\", 100, 1000, {from: member1});","            \treturn contract.organizationID.call()","        }).then(","\t    \tfunction(ID) { ","\t        \tassert.equal(ID, 1, \"organizationID has not incremented\");","\t        \treturn contract.numOrganizations.call()","\t    }).then(","\t    \tfunction(NbOrg) { ","\t        \tassert.equal(NbOrg, 1, \"Adress of the organization not in organizations\");","\t        \treturn contract.organizations.call(0);","\t    }).then(","\t    \tfunction(addr) { ","\t    \t\tconsole.log(addr);","\t    \t\torganizationAddr = addr;","\t    \t\torg = Organization.at(addr);","\t        \treturn org.organizationOwner.call();","\t    }).then(","\t    \tfunction(organizationowner) { ","\t        \tassert.equal(organizationowner, member1, \"member1 is not the organizationowner\");","\t        \tcontract.DeleteOrganization(organizationAddr);","\t        \treturn contract.numOrganizations.call() ","\t    }).then(","\t    \tfunction(numorg) { ","\t        \tassert.equal(numorg, 1, \"Num org should be 1, deletion should not have been completed\");","\t          \tcontract.DeleteOrganization(organizationAddr, {from: member1});","\t        \treturn contract.numOrganizations.call() ","\t    }).then(","\t    \tfunction(numorg) { ","\t        \tassert.equal(numorg, 0, \"Numorg should be 0, deletion should have been completed\")","            \tdone();","        }).catch(done);","      }).catch(done);","    });","  ","  //   // it(\"Should let anyone create an organization with the right parameters\", function(done) {","  //   //   //var o = Organizations.at(Organization.deployed_address);","      ","  //   //   Organizations.new({from: creator}).then(","  //   //     function(contract) {","  //   //     \tconsole.log(0)","  //   //       contract.NewOrganization(\"FirstOrg\", 100, {from: member1}).then(","  //   //         function() { ","  //   //          return contract.organizations.call(0);","  //   //          console.log(2)","  //   //       }).then(","  //   //         function(name) { ","  //   //           console.log(name); ","  //   //           name.name","  //   //       }).then(","  //   //         function(name) { ","  //   //           assert.equal(name, \"FirstOrg\", \"Count doesn't match!\"); ","  //   //      /* }).then(","  //   //         function() { ","  //   //           return organization.addMember(member1);","  //   //       }).then(","  //   //         function() { ","  //   //           return organization.token_count.call()","  //   //       }).then(","  //   //         function(count) { ","  //   //           assert.equal(count, 100, \"New token_count is not correct!\");","  //   //           return organization.numMembers.call()","  //         }).then(","  //           function(num) { ","  //             assert.equal(num, 1, \"New numMembers is not correct!\");","  //             return organization.members.call(member1)","  //         }).then(","  //           function(isMember) { ","  //             assert.equal(isMember, true, \"Member 1 is not registered\");","  //             return organization.balances.call(member1)","  //         }).then(","  //           function(balance) { ","  //             assert.equal(balance, 100, \"Balance is wrong\");*/","  //             done()","  //         }).catch(done);","  //     }).catch(done);","  //   });","  ","  //   it(\"Should update token_count, numMembers and balance upon removing member\", function(done) {","  //     var o = Organization.at(Organization.deployed_address);","      ","  //     Organization.new({from: organizer}).then(","  //       function(organization) {","  //         organization.token_count.call().then(","  //           function(count) { ","  //             assert.equal(count, 0, \"Count doesn't match!\"); ","  //         }).then(","  //           function() { ","  //             return organization.addMember(member1);","  //         }).then(","  //           function() { ","  //             return organization.removeMember(member1);","  //         }).then(","  //           function() { ","  //             return organization.token_count.call()","  //         }).then(","  //           function(count) { ","  //             assert.equal(count, 0, \"New token_count is not correct!\");","  //             return organization.numMembers.call()","  //         }).then(","  //           function(num) { ","  //             assert.equal(num, 0, \"New numMembers is not correct!\");","  //             return organization.members.call(member1)","  //         }).then(","  //           function(isMember) { ","  //             assert.equal(isMember, false, \"Member 1 is not registered\");","  //             return organization.balances.call(member1)","  //         }).then(","  //           function(balance) { ","  //             assert.equal(balance, 0, \"Balance is wrong\");","  //             done()","  //         }).catch(done);","  //     }).catch(done);","  //   });","  ","  //   it(\"Should update proposal array when creating proposal\", function(done) {","  //     var o = Organization.at(Organization.deployed_address);","      ","  //     Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","  //       function(organization) {","  //         organization.makeProposal('board election', 14491063620 + 10, 14491063620 +12).then(","  //           function() { ","  //             return organization.numProposals.call();","  //         }).then(","  //           function(num) { ","  //             assert.equal(num, 1, \"New numProposal wrong\")","  //             return organization.proposals(0)","  //         }).then(","  //           function(proposalAddress) { ","  //             var proposal = Proposal.at(proposalAddress)","  //             return proposal.name.call()","  //         }).then(","  //           function(name) { ","  //             assert.equal(name, 'board election', \"Proposal name is wrong\");","  //             done();","  //         }).catch(done);","  //     }).catch(done);","  //   });","  ","  //   it(\"Should forbid vote for non-member\", function(done) {","  //     var o = Organization.at(Organization.deployed_address);","  //     var p = {}","      ","  //     Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","  //       function(organization) {","  //         organization.makeProposal('board election', 14491063620 + 10, 14491063620 +12).then(","  //           function() { ","  //             return organization.proposals(0);","  //         }).then(","  //           function(proposalAddress) { ","  //             p = Proposal.at(proposalAddress)","  //             return organization.vote(true, 1, proposalAddress, {from: member1})            ","  //         }).then(","  //           function() { ","  //             return p.forVotes.call()","  //         }).then(","  //           function(numVotes) {  ","  //             assert.equal(numVotes, 0, \"Vote shouldn't be allowed\");","  //             done();","  //         }).catch(done);","  //     }).catch(done);","  //   });","  ","  //   it(\"Should allow vote for member\", function(done) {","  //     var o = Organization.at(Organization.deployed_address);","  //     var p = {}","      ","  //     Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","  //       function(organization) {","  //         organization.addMember(member1)","  //         .then(","  //           function() {","  //             return organization.toTime(0)","  //         }).then(","  //           function() { ","  //             return organization.makeProposal('board election', 4, 10);","  //         }).then(","  //           function() { ","  //             return organization.toTime(7)","  //         }).then(","  //           function() { ","  //             return organization.proposals(0)","  //         }).then(","  //           function(proposalAddress) { ","  //             p = Proposal.at(proposalAddress)","  //             p.toTime(7)","  //             return organization.proposals(0)           ","  //         }).then(","  //           function(proposalAddress) { ","  //             p = Proposal.at(proposalAddress)","  //             return organization.vote(true, 1, proposalAddress, {from: member1})            ","  //         }).then(","  //           function() { ","  //             return p.forVotes.call()","  //         }).then(","  //           function(numVotes) {  ","  //             assert.equal(numVotes.toString(10), 1, \"Vote should be allowed\");","  //             done();","  //         }).catch(done);","  //     }).catch(done);","  //   });","  ","  //   it(\"Should allow weighted vote for member\", function(done) {","  //     var o = Organization.at(Organization.deployed_address);","  //     var p = {}","      ","  //     Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","  //       function(organization) {","  //         organization.addMember(member1)","  //         .then(","  //           function() {","  //             return organization.toTime(0)","  //         }).then(","  //           function() {  ","  //             return organization.makeProposal('board election',  4, 10);","  //         }).then(","  //           function() { ","  //             return organization.toTime(7)","  //         }).then(","  //           function() { ","  //             return organization.proposals(0)","  //         }).then(","  //           function(proposalAddress) { ","  //             p = Proposal.at(proposalAddress)","  //             p.toTime(7)","  //             return organization.proposals(0)           ","  //         }).then(","  //           function(proposalAddress) { ","  //             console.log(proposalAddress)","  //             p = Proposal.at(proposalAddress)","  //             return organization.vote(true, 3, proposalAddress, {from: member1})            ","  //         }).then(","  //           function() { ","  //             return organization.balances.call(member1)","  //         }).then(","  //           function(balance) { ","  //             assert.equal(balance, 91, \"Wrong balance after vote\")","  //             return p.bal.call()","  //         }).then(","  //           function(propbalance) { ","  //             assert.equal(propbalance.toString(10), 9, \"Wrong propbalance after vote\")","  //             return p.forVotes.call()","  //         }).then(","  //           function(numVotes) {  ","  //             assert.equal(numVotes, 3, \"Vote should be allowed\");","  //             done();","  //         }).catch(done);","  //     }).catch(done);","  //   });","  ","  ","  //   it(\"Should allow weighted vote for member\", function(done) {","  //     var o = Organization.at(Organization.deployed_address);","  //     var p = {}","      ","  //     Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","  //       function(organization) {","  //         organization.addMember(member1).then(","  //           function() {","  //             return organization.toTime(0)","  //         }).then(","  //           organization.addMember(member2)).then(","  //           function() { ","  //             return organization.makeProposal('board election', 4, 10);","  //         }).then(","  //           function() { ","  //             return organization.toTime(7)","  //         }).then(","  //           function() { ","  //             return organization.proposals(0)","  //         }).then(","  //           function(proposalAddress) { ","  //             console.log(proposalAddress)","  //             p = Proposal.at(proposalAddress)","  //             p.toTime(7)","  //             organization.vote(true, 3, proposalAddress, {from: member1}) ","  //             return proposalAddress         ","  //         }).then(","  //           function(proposalAddress) {","  //             return organization.vote(false, 2, proposalAddress, {from: member2})   ","  //         }).then(","  //           function() { ","  //             return organization.balances.call(member1)","  //         }).then(","  //           function(balance) { ","  //             assert.equal(balance, 91, \"Wrong balance after vote\")","  //             return organization.balances.call(member2)","  //         }).then(","  //           function(balance) { ","  //             assert.equal(balance, 96, \"Wrong balance after vote\")","  //             return p.bal.call()","  //         }).then(","  //           function(propbalance) { ","  //             assert.equal(propbalance, 13, \"Wrong propbalance after vote\")","  //             return p.forVotes.call()","  //         }).then(","  //           function(numVotes) {  ","  //             assert.equal(numVotes, 3, \"Vote should be allowed\");","  //             done();","  //         }).catch(done);","  //     }).catch(done);","  //   });","  ","  // it(\"Should get result and redistribute tokens\", function(done) {","  //     var o = Organization.at(Organization.deployed_address);","  //     var p = {}","  //     var paddress = {}","      ","  //     Organization.new({from: organizer, value: 50000000, gas: 50000000}).then(","  //       function(organization) {","  //         organization.addMember(member1).then(","  //           function() {","  //             return organization.toTime(0)","  //         }).then(","  //           function() {","  //             return organization.addMember(member2)","  //         }).then(","  //           function() { ","  //             return organization.makeProposal('board election', 4, 10);","  //         }).then(","  //           function() { ","  //             return organization.toTime(7)","  //         }).then(","  //           function() { ","  //             return organization.proposals(0)","  //         }).then(","  //           function(proposalAddress) { ","  //             console.log(proposalAddress)","  //             paddress = proposalAddress","  //             p = Proposal.at(proposalAddress)","  //             p.toTime(7)","  //             organization.vote(true, 4, proposalAddress, {from: member1})          ","  //             organization.vote(false, 2, proposalAddress, {from: member2})            ","  //         }).then(","  //           function() {","  //             return organization.balances.call(member1)","  //         }).then(","  //           function(balance) { ","  //             assert.equal(balance, 84, \"Wrong balance after vote for member1\")","  //             return organization.balances.call(member2)","  //         }).then(","  //           function(balance) {","  //             assert.equal(balance, 96, \"Wrong balance after vote for member2\")","  //             organization.toTime(13)","  //             p.toTime(13)","  //             organization.getResult(paddress)","  //             return organization.propResults.call(paddress)","  //         }).then(","  //           function(result) {  ","  //             assert.equal(result, 1, \"Proposal should be adopted\");","  //             return p.bal.call()","  //         }).then(","  //           function() { ","  //             return organization.balances.call(member1)","  //           }).then(","  //           function(newbalance1) { ","  //             assert.equal(newbalance1.toString(10), 94, \"Wrong balance after vote for member2\")","  //             return organization.balances.call(member2)","  //           }).then(","  //           function(newbalance2) { ","  //             assert.equal(newbalance2, 106, \"Wrong balance after vote for member2\")","  //             done();","  //         }).catch(done);","  //     }).catch(done);","  //   });","   });"],"id":520},{"start":{"row":0,"column":0},"end":{"row":208,"column":0},"action":"insert","lines":["  contract('OrganizationsFactory', function(accounts) {","    console.log(accounts);","    var creator = accounts[0];","    var member1 = accounts[1];","    var member2 = accounts[2];","  ","    it(\"Should let anyone create a Factory, as the factoryManager. And anyone create an organization\", function(done) {","    \tvar org = {}","    \tvar organizationAddr;","    //  var o = Organizations.at(Organizations.deployed_address);","      ","      OrganizationsFactory.new({from: creator}).then(","        function (contract) {","        contract.factoryManager.call()","        .then(","        \tfunction(createdBy) { ","            \tassert.equal(createdBy, creator, \"Owner address is wrong!\"); ","        }).then(","        \tfunction(name) { ","            \tcontract.NewOrganization(\"ONU\", 100, 1000, {from: member1});","            \treturn contract.organizationID.call()","        }).then(","\t    \tfunction(ID) { ","\t        \tassert.equal(ID, 1, \"organizationID has not incremented\");","\t        \treturn contract.numOrganizations.call()","\t    }).then(","\t    \tfunction(NbOrg) { ","\t        \tassert.equal(NbOrg, 1, \"Adress of the organization not in organizations\");","\t        \treturn contract.organizations.call(0);","\t    }).then(","\t    \tfunction(addr) { ","\t    \t\tconsole.log(addr);","\t    \t\torganizationAddr = addr;","\t    \t\torg = Organization.at(addr);","\t        \treturn org.organizationOwner.call();","\t    }).then(","\t    \tfunction(organizationowner) { ","\t        \tassert.equal(organizationowner, member1, \"member1 is not the organizationowner\");","\t        \tcontract.DeleteOrganization(organizationAddr);","\t        \treturn contract.numOrganizations.call() ","\t    }).then(","\t    \tfunction(numorg) { ","\t        \tassert.equal(numorg, 1, \"Num org should be 1, deletion should not have been completed\");","\t          \tcontract.DeleteOrganization(organizationAddr, {from: member1});","\t        \treturn contract.numOrganizations.call() ","\t    }).then(","\t    \tfunction(numorg) { ","\t        \tassert.equal(numorg, 0, \"Numorg should be 0, deletion should have been completed\")","            \tdone();","        }).catch(done);","      }).catch(done);","    });","});","","contract('Organization', function(accounts) {","    console.log(accounts);","    var creator = accounts[0];","    var member1 = accounts[1];","    var member2 = accounts[2];","    var organizationAddr;","    var proposalAddress;","    var org = {};","    var p = {};","","    it(\"The creator of the organization should be able to add and remove member\", function(done) {","      ","      OrganizationsFactory.new({from: creator}).then(","        function (contract) {","        \tcontract.NewOrganization(\"ONU\", 100, 1000, {from: member1})","        .then(","        \tfunction() { ","            \treturn contract.organizations.call(0);","        }).then(","        \tfunction(addr) { ","            \tconsole.log(addr);","\t    \t\torganizationAddr = addr;","\t    \t\torg = Organization.at(addr);","\t        \treturn org.organizationOwner.call();","        }).then(","\t    \tfunction(organizationowner) { ","\t        \tassert.equal(organizationowner, member1, \"member1 is not the organizationowner\");","\t        \torg.addMember(member2);","\t        \treturn org.members.call(member2);","\t    }).then(","            function(member2registered) { ","\t        \tassert.equal(member2registered, false, \"member2 is registered, it should not be\");","                org.addMember(member2, {from: member1});","                return org.members.call(member2);","\t    }).then(","            function(member2registered) { ","\t        \tassert.equal(member2registered, true, \"member2 is not registered, it should be\");","\t        \torg.removeMember(member2, {from: member1});","                return org.members.call(member2);","        }).then(","            function(member2registered) { ","\t        \tassert.equal(member2registered, false, \"member2 is  registered, it should have been removed\");","              done()","        }).catch(done);","    }).catch(done);","  });","  ","  it(\"Should let two members vote and getresult within proposal\", function(done) {","      ","      OrganizationsFactory.new({from: creator}).then(","        function (contract) {","        \tcontract.NewOrganization(\"ONU\", 100, 1000, {from: member1})","        .then(","        \tfunction() { ","            \treturn contract.organizations.call(0);","        }).then(","        \tfunction(addr) { ","            \tconsole.log(addr);","\t    \t\torganizationAddr = addr;","\t    \t\torg = Organization.at(addr);","\t    \t\tconsole.log(0);","\t        \torg.addMember(member1, {from: member1});","                org.addMember(member2, {from: member1});","                console.log(1);","                org.makeProposal(\"yolo\", \"this is yolo\", 2000, 3000, {from: member1});","                console.log(2);","            \treturn org.proposalID.call();","        }).then(","            function(address) { ","            \tconsole.log(3);","            \tconsole.log(address);","            \treturn org.proposals.call(address);","        }).then(","        \tfunction(address) {","        \t\tconsole.log(address);","            \tp = Proposal.at(address);","            \tproposalAddress = address;","            \tconsole.log(4);","            \torg.vote(false, 2, proposalAddress, {from: member1});","            \torg.vote(true, 1, proposalAddress, {from: member2});","            \treturn p.nbVoters.call();","        }).then(","            function(nbvo) { ","\t     \t\tassert.equal(nbvo.toString(), 2, \"there are not 2 nbVoters\");\t        \t","         \t\treturn p.forVotes.call();","        }).then(","            function(bla) { ","\t     \t\tassert.equal(bla, 1, \"there are not 2 nbVoters\");\t        \t","              \treturn p.againstVotes.call()","        }).then(","            function(count) { ","              assert.equal(count.toString(), 2, \"New token_count is not correct!\");","              p.Results();","             return p.result.call()","        }).then(","            function(num) { ","              assert.equal(num.toString(), 0, \"The result is not 0\");","              done()","        }).catch(done);","    }).catch(done);","  });","","it(\"Should let two members vote and getresult within proposal\", function(done) {","      ","      OrganizationsFactory.new({from: creator}).then(","        function (contract) {","        \tcontract.NewOrganization(\"ONU\", 100, 1000, {from: member1})","        .then(","        \tfunction() { ","            \treturn contract.organizations.call(0);","        }).then(","        \tfunction(addr) { ","            \tconsole.log(addr);","\t    \t\torganizationAddr = addr;","\t    \t\torg = Organization.at(addr);","\t    \t\tconsole.log(0);","\t        \torg.addMember(member1, {from: member1});","                org.addMember(member2, {from: member1});","                console.log(1);","                org.makeProposal(\"yolo\", \"this is yolo\", 2000, 3000, {from: member1});","                console.log(2);","            \treturn org.proposalID.call();","        }).then(","            function(address) { ","            \tconsole.log(3);","            \tconsole.log(address);","            \treturn org.proposals.call(address);","        }).then(","        \tfunction(address) {","        \t\tconsole.log(address);","            \tp = Proposal.at(address);","            \tproposalAddress = address;","            \tconsole.log(4);","            \torg.vote(false, 2, proposalAddress, {from: member1});","            \torg.vote(true, 1, proposalAddress, {from: member2});","            \torg.getResult(proposalAddress);","            \treturn org.propResults.call(proposalAddress)","        }).then(","            function(count) { ","              assert.equal(count.toString(), 0, \"The result should be 0 = vote rejected\");","              return org.balances.call(member1);","        }).then(","            function(address) { ","              assert.equal(address.toString(), 98, \"New token_count is not correct!\");","              return org.balances.call(member2);","        }).then(","        \tfunction(caca) {","        \t\tassert.equal(caca.toString(), 101);","              done()","        }).catch(done);","    }).catch(done);","  });",""," });",""]}]]},"ace":{"folds":[],"scrolltop":2061.5,"scrollleft":0,"selection":{"start":{"row":140,"column":25},"end":{"row":140,"column":25},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":136,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1449375466072}