{"changed":true,"filter":false,"title":"Organization.sol","tooltip":"/contracts/Organization.sol","value":"import \"Proposal\";\n\ncontract Organization {  // can be killed, so the owner gets sent the money in the end\n\n\taddress public organizer;\n\tmapping (address => bool) public members;\n\tmapping (address => uint) public balances;\n\tuint public numMembers;\n\tuint public token_count;\n\tuint public base_tokens = 100;\n\tuint public numProposals;\n\taddress[] public proposals;\n\n\tevent NewMember(address _new); // so you can log the event\n\tevent DeletedMember(address _old); // so you can log the event\n\n\tfunction Organization() {\n\t\torganizer = msg.sender;\t\t\n\t\ttoken_count = 0;\n\t\tnumMembers = 0;\n\t}\n\n\tfunction makeProposal(string name) {\n\t\taddress prop = new Proposal(name);\n\t\tproposals.push(prop);\n\t\tnumProposals++;\n\t}\n\n\tfunction addMember(address newMember) {\n\t\tif(msg.sender != organizer) { return; }\n\t\tmembers[newMember] = true;\n\t\tnumMembers++;\n\t\tbalances[newMember] = 0;\n\t\tgiveTokens(base_tokens, newMember);\n\t}\n\n\tfunction removeMember(address member) {\n\t\tif(msg.sender != organizer || !members[member]) { return; }\n\t\tmembers[member] = false;\n\t\tnumMembers--;\n\t\ttoken_count -= balances[member];\n\t\tbalances[member] = 0;\n\t}\n\n\tfunction giveTokens(uint amount, address dest) {\n\t\ttoken_count += amount;\n\t\tbalances[dest] += amount;\n\t}\n\n\tfunction vote(bool vote, uint weight, address proposal) {\n\t\tif( !members[msg.sender] ) { return; }\n\t\tif( balances[msg.sender] < 1) { return; }\n\t\tif( weight < 1 ) { return; }\n\t\tif( weight*weight > balances[msg.sender] ) { return; }\n\n\t\tbalances[msg.sender] -= weight*weight;\n\n\t\tProposal(proposal).vote(vote, weight, msg.sender);\n\t}\n\n\t// function buyTicket() public returns (bool success){\n\t// \tif (numRegistrants >= quota) { return false; }\n\t// \tregistrantsPaid[msg.sender] = msg.value;\n\t// \tnumRegistrants++;\n\t// \tDeposit(msg.sender, msg.value);\n\t// \treturn true;\n\t// }\n\n\t// function changeQuota(uint newquota) public {\n\t// \tif (msg.sender != organizer) { return; }\n\t// \tquota = newquota;\n\t// }\n\n\t// function refundTicket(address recipient, uint amount) public returns (bool success){\n\t// \tif (msg.sender != organizer) { return false; }\n\t// \tif (registrantsPaid[recipient] == amount) { \n\t// \t\taddress myAddress = this;\n\t// \t\tif (myAddress.balance >= amount) { \n\t// \t\t\trecipient.send(amount);\n\t// \t\t\tRefund(recipient, amount);\n\t// \t\t\tregistrantsPaid[recipient] = 0;\n\t// \t\t\tnumRegistrants--;\n\t// \t\t\treturn true;\n\t// \t\t}\n\t// \t}\n\t// \treturn false;\n\t// }\n\n\tfunction destroy() {\n\t\tif (msg.sender == organizer) { // without this funds could be locked in the contract forever!\n\t\t\tsuicide(organizer);\n\t\t}\n\t}\n}\n","undoManager":{"mark":-2,"position":1,"stack":[[{"start":{"row":78,"column":30},"end":{"row":78,"column":31},"action":"insert","lines":["s"],"id":2}],[{"start":{"row":78,"column":30},"end":{"row":78,"column":31},"action":"remove","lines":["s"],"id":3}]]},"ace":{"folds":[],"scrolltop":1001.5,"scrollleft":0,"selection":{"start":{"row":90,"column":22},"end":{"row":90,"column":22},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":65,"state":"no_regex","mode":"plugins/ethergit.solidity.language/solidity_mode"}},"timestamp":1449082966731}