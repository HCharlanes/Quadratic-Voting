{"changed":true,"filter":false,"title":"Organizations.sol","tooltip":"/contracts/Organizations.sol","value":"import \"Proposal\";\ncontract Organizations {  // can be killed, so the owner gets sent the money in the end\nuint public Now = now;\naddress public owner;\n    function Organizations(){\n        owner = msg.sender;\n    }\nstruct Organization{\n\tstring name;\n\taddress organizer;\n\tmapping (address => bool) members;\n\tmapping (address => uint) balances;\n\tuint numMembers;\n\tuint token_count;\n\tuint base_tokens;\n\tuint numProposals;\n\taddress[] proposals;\n}\n    Organization[] public organizations;\n\tevent NewMember(address _new); // so you can log the event\n\tevent DeletedMember(address _old); // so you can log the event\n\t\n\tfunction NewOrganization(string name, uint base_tokens) returns (uint Org){\n\t\tuint newOrg = 0;\n\t\torganizations[newOrg] = Organization(name, msg.sender, 0, 0, base_tokens, 0);\n\t\treturn newOrg;\n\t}\n\n\tfunction makeProposal(string name, string description, uint starttime, uint endtime) {\n\t\taddress prop = new Proposal(name, description, starttime, endtime);\n\t\torganizations[name].proposals.push(prop);\n\t\torganizations[name].numProposals++;\n\t}\n\n\tfunction addMember(string name, address newMember) {\n\t\tif(msg.sender != organizations[name].organizer) { return; }\n\t\torganizations[name].members[newMember] = true;\n\t\torganizations[name].numMembers++;\n\t\torganizations[name].balances[newMember] = 0;\n\t\tgiveTokens(name, organizations[name].base_tokens, newMember);\n\t}\n\n\tfunction removeMember(string name, address member) {\n\t\tif(msg.sender != organizations[name].organizer || !organizations[name].members[member]) { return; }\n\t\torganizations[name].members[member] = false;\n\t\torganizations[name].numMembers--;\n\t\torganizations[name].token_count -= organizations[name].balances[member];\n\t\torganizations[name].balances[member] = 0;\n\t}\n\n\tfunction giveTokens(string name, uint amount, address dest) {\n\t\torganizations[name].token_count += amount;\n\t\torganizations[name].balances[dest] += amount;\n\t}\n\n\tfunction vote(string name, bool vote, uint weight, address proposal) {\n\t\tif( !organizations[name].members[msg.sender] ) { return; }\n\t\tif( organizations[name].balances[msg.sender] < 1) { return; }\n\t\tif( weight < 1 ) { return; }\n\t\tif( weight*weight > organizations[name].balances[msg.sender] ) { return; }\n\t\tProposal prop = Proposal(proposal);\n\n\t\tif( Now >= prop.startTime() && Now < prop.endTime() ) {\n\t\t\torganizations[name].balances[msg.sender] -= weight*weight;\n\t\t\tprop.vote(vote, weight, msg.sender);\n\t\t}\n\t}\n\n\tfunction dispatchBalance(string name, address proposal) {\n\t\tProposal p = Proposal(proposal);\n\t\tfor(var i=0; i < p.nbVoters(); i++) {\n\t\t\torganizations[name].balances[p.voted(i)] += (p.bal() / p.nbVoters());\t\n\t\t}\n\t}\n\t/*\n\tfunction getResult (address proposalAddress) {\n\t\tif (propResults[proposalAddress] != -1) { return; }\n\t\tProposal p = Proposal(proposalAddress);\n\t\tif(now >= p.endTime() ){\n\t\t\tpropResults[proposalAddress] = p.Results();\n\t\t\tdispatchBalance(proposalAddress);\n\t\t\tp.destroy();\n\t\t}\n\t}\n\t*/\n\tfunction toTime(uint fakeTime) {\n\t\tNow = fakeTime;\n\n\t}\n\n\tfunction destroy() {\n\t\tif (msg.sender == owner) { // without this funds could be locked in the contract forever!\n\t\t\tsuicide(owner);\n\t\t}\n\t}\n}","undoManager":{"mark":1,"position":3,"stack":[[{"start":{"row":22,"column":0},"end":{"row":29,"column":2},"action":"remove","lines":["\tfunction NewOrganization(string name, uint base_tokens) {","\t\torganizations[] = name;","\t\torganizations[name].organizer = msg.sender;\t\t","\t\torganizations[name].token_count = 0;","\t\torganizations[name].numMembers = 0;","\t\torganizations[name.numProposals = 0;","\t\torganizations[name].base_tokens = base_tokens;","\t}"],"id":1857},{"start":{"row":22,"column":0},"end":{"row":26,"column":2},"action":"insert","lines":["function NewOrganization(string name, uint base_tokens) returns (uint Org){","\t\tuint newOrg = 0;","\t\torganizations[newOrg] = Organization(name, msg.sender, 0, 0, base_tokens, 0);","\t\treturn newOrg;","\t}"]}],[{"start":{"row":22,"column":0},"end":{"row":22,"column":1},"action":"insert","lines":["\t"],"id":1858}],[{"start":{"row":6,"column":5},"end":{"row":6,"column":6},"action":"insert","lines":["\t"],"id":1859}],[{"start":{"row":6,"column":5},"end":{"row":6,"column":6},"action":"remove","lines":["\t"],"id":1860}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":10,"column":1},"end":{"row":11,"column":36},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1449352679338}